// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/campaign"
	"nlypage-final/internal/adapters/database/postgres/ent/targeting"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Campaign is the model entity for the Campaign schema.
type Campaign struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AdvertiserID holds the value of the "advertiser_id" field.
	AdvertiserID uuid.UUID `json:"advertiser_id,omitempty"`
	// ImpressionsLimit holds the value of the "impressions_limit" field.
	ImpressionsLimit int `json:"impressions_limit,omitempty"`
	// ClicksLimit holds the value of the "clicks_limit" field.
	ClicksLimit int `json:"clicks_limit,omitempty"`
	// CostPerImpression holds the value of the "cost_per_impression" field.
	CostPerImpression float64 `json:"cost_per_impression,omitempty"`
	// CostPerClick holds the value of the "cost_per_click" field.
	CostPerClick float64 `json:"cost_per_click,omitempty"`
	// AdTitle holds the value of the "ad_title" field.
	AdTitle string `json:"ad_title,omitempty"`
	// AdText holds the value of the "ad_text" field.
	AdText string `json:"ad_text,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate int `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate int `json:"end_date,omitempty"`
	// Moderated holds the value of the "moderated" field.
	Moderated bool `json:"moderated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CampaignQuery when eager-loading is set.
	Edges        CampaignEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CampaignEdges holds the relations/edges for other nodes in the graph.
type CampaignEdges struct {
	// Targeting holds the value of the targeting edge.
	Targeting *Targeting `json:"targeting,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TargetingOrErr returns the Targeting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CampaignEdges) TargetingOrErr() (*Targeting, error) {
	if e.Targeting != nil {
		return e.Targeting, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: targeting.Label}
	}
	return nil, &NotLoadedError{edge: "targeting"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Campaign) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case campaign.FieldModerated:
			values[i] = new(sql.NullBool)
		case campaign.FieldCostPerImpression, campaign.FieldCostPerClick:
			values[i] = new(sql.NullFloat64)
		case campaign.FieldImpressionsLimit, campaign.FieldClicksLimit, campaign.FieldStartDate, campaign.FieldEndDate:
			values[i] = new(sql.NullInt64)
		case campaign.FieldAdTitle, campaign.FieldAdText, campaign.FieldImageURL:
			values[i] = new(sql.NullString)
		case campaign.FieldID, campaign.FieldAdvertiserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Campaign fields.
func (c *Campaign) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case campaign.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case campaign.FieldAdvertiserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field advertiser_id", values[i])
			} else if value != nil {
				c.AdvertiserID = *value
			}
		case campaign.FieldImpressionsLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field impressions_limit", values[i])
			} else if value.Valid {
				c.ImpressionsLimit = int(value.Int64)
			}
		case campaign.FieldClicksLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clicks_limit", values[i])
			} else if value.Valid {
				c.ClicksLimit = int(value.Int64)
			}
		case campaign.FieldCostPerImpression:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost_per_impression", values[i])
			} else if value.Valid {
				c.CostPerImpression = value.Float64
			}
		case campaign.FieldCostPerClick:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost_per_click", values[i])
			} else if value.Valid {
				c.CostPerClick = value.Float64
			}
		case campaign.FieldAdTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ad_title", values[i])
			} else if value.Valid {
				c.AdTitle = value.String
			}
		case campaign.FieldAdText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ad_text", values[i])
			} else if value.Valid {
				c.AdText = value.String
			}
		case campaign.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				c.ImageURL = value.String
			}
		case campaign.FieldStartDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				c.StartDate = int(value.Int64)
			}
		case campaign.FieldEndDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				c.EndDate = int(value.Int64)
			}
		case campaign.FieldModerated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field moderated", values[i])
			} else if value.Valid {
				c.Moderated = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Campaign.
// This includes values selected through modifiers, order, etc.
func (c *Campaign) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTargeting queries the "targeting" edge of the Campaign entity.
func (c *Campaign) QueryTargeting() *TargetingQuery {
	return NewCampaignClient(c.config).QueryTargeting(c)
}

// Update returns a builder for updating this Campaign.
// Note that you need to call Campaign.Unwrap() before calling this method if this Campaign
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Campaign) Update() *CampaignUpdateOne {
	return NewCampaignClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Campaign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Campaign) Unwrap() *Campaign {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Campaign is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Campaign) String() string {
	var builder strings.Builder
	builder.WriteString("Campaign(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("advertiser_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AdvertiserID))
	builder.WriteString(", ")
	builder.WriteString("impressions_limit=")
	builder.WriteString(fmt.Sprintf("%v", c.ImpressionsLimit))
	builder.WriteString(", ")
	builder.WriteString("clicks_limit=")
	builder.WriteString(fmt.Sprintf("%v", c.ClicksLimit))
	builder.WriteString(", ")
	builder.WriteString("cost_per_impression=")
	builder.WriteString(fmt.Sprintf("%v", c.CostPerImpression))
	builder.WriteString(", ")
	builder.WriteString("cost_per_click=")
	builder.WriteString(fmt.Sprintf("%v", c.CostPerClick))
	builder.WriteString(", ")
	builder.WriteString("ad_title=")
	builder.WriteString(c.AdTitle)
	builder.WriteString(", ")
	builder.WriteString("ad_text=")
	builder.WriteString(c.AdText)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(c.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(fmt.Sprintf("%v", c.StartDate))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(fmt.Sprintf("%v", c.EndDate))
	builder.WriteString(", ")
	builder.WriteString("moderated=")
	builder.WriteString(fmt.Sprintf("%v", c.Moderated))
	builder.WriteByte(')')
	return builder.String()
}

// Campaigns is a parsable slice of Campaign.
type Campaigns []*Campaign

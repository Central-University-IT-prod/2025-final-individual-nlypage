// Code generated by ent, DO NOT EDIT.

package campaign

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the campaign type in the database.
	Label = "campaign"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAdvertiserID holds the string denoting the advertiser_id field in the database.
	FieldAdvertiserID = "advertiser_id"
	// FieldImpressionsLimit holds the string denoting the impressions_limit field in the database.
	FieldImpressionsLimit = "impressions_limit"
	// FieldClicksLimit holds the string denoting the clicks_limit field in the database.
	FieldClicksLimit = "clicks_limit"
	// FieldCostPerImpression holds the string denoting the cost_per_impression field in the database.
	FieldCostPerImpression = "cost_per_impression"
	// FieldCostPerClick holds the string denoting the cost_per_click field in the database.
	FieldCostPerClick = "cost_per_click"
	// FieldAdTitle holds the string denoting the ad_title field in the database.
	FieldAdTitle = "ad_title"
	// FieldAdText holds the string denoting the ad_text field in the database.
	FieldAdText = "ad_text"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldModerated holds the string denoting the moderated field in the database.
	FieldModerated = "moderated"
	// EdgeTargeting holds the string denoting the targeting edge name in mutations.
	EdgeTargeting = "targeting"
	// Table holds the table name of the campaign in the database.
	Table = "campaigns"
	// TargetingTable is the table that holds the targeting relation/edge.
	TargetingTable = "targetings"
	// TargetingInverseTable is the table name for the Targeting entity.
	// It exists in this package in order to avoid circular dependency with the "targeting" package.
	TargetingInverseTable = "targetings"
	// TargetingColumn is the table column denoting the targeting relation/edge.
	TargetingColumn = "campaign_targeting"
)

// Columns holds all SQL columns for campaign fields.
var Columns = []string{
	FieldID,
	FieldAdvertiserID,
	FieldImpressionsLimit,
	FieldClicksLimit,
	FieldCostPerImpression,
	FieldCostPerClick,
	FieldAdTitle,
	FieldAdText,
	FieldImageURL,
	FieldStartDate,
	FieldEndDate,
	FieldModerated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ImpressionsLimitValidator is a validator for the "impressions_limit" field. It is called by the builders before save.
	ImpressionsLimitValidator func(int) error
	// ClicksLimitValidator is a validator for the "clicks_limit" field. It is called by the builders before save.
	ClicksLimitValidator func(int) error
	// AdTitleValidator is a validator for the "ad_title" field. It is called by the builders before save.
	AdTitleValidator func(string) error
	// AdTextValidator is a validator for the "ad_text" field. It is called by the builders before save.
	AdTextValidator func(string) error
	// StartDateValidator is a validator for the "start_date" field. It is called by the builders before save.
	StartDateValidator func(int) error
	// EndDateValidator is a validator for the "end_date" field. It is called by the builders before save.
	EndDateValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Campaign queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAdvertiserID orders the results by the advertiser_id field.
func ByAdvertiserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdvertiserID, opts...).ToFunc()
}

// ByImpressionsLimit orders the results by the impressions_limit field.
func ByImpressionsLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImpressionsLimit, opts...).ToFunc()
}

// ByClicksLimit orders the results by the clicks_limit field.
func ByClicksLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClicksLimit, opts...).ToFunc()
}

// ByCostPerImpression orders the results by the cost_per_impression field.
func ByCostPerImpression(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostPerImpression, opts...).ToFunc()
}

// ByCostPerClick orders the results by the cost_per_click field.
func ByCostPerClick(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostPerClick, opts...).ToFunc()
}

// ByAdTitle orders the results by the ad_title field.
func ByAdTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdTitle, opts...).ToFunc()
}

// ByAdText orders the results by the ad_text field.
func ByAdText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdText, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByModerated orders the results by the moderated field.
func ByModerated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModerated, opts...).ToFunc()
}

// ByTargetingField orders the results by targeting field.
func ByTargetingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetingStep(), sql.OrderByField(field, opts...))
	}
}
func newTargetingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TargetingTable, TargetingColumn),
	)
}

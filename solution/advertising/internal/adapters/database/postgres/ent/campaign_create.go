// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/campaign"
	"nlypage-final/internal/adapters/database/postgres/ent/targeting"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CampaignCreate is the builder for creating a Campaign entity.
type CampaignCreate struct {
	config
	mutation *CampaignMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAdvertiserID sets the "advertiser_id" field.
func (cc *CampaignCreate) SetAdvertiserID(u uuid.UUID) *CampaignCreate {
	cc.mutation.SetAdvertiserID(u)
	return cc
}

// SetImpressionsLimit sets the "impressions_limit" field.
func (cc *CampaignCreate) SetImpressionsLimit(i int) *CampaignCreate {
	cc.mutation.SetImpressionsLimit(i)
	return cc
}

// SetClicksLimit sets the "clicks_limit" field.
func (cc *CampaignCreate) SetClicksLimit(i int) *CampaignCreate {
	cc.mutation.SetClicksLimit(i)
	return cc
}

// SetCostPerImpression sets the "cost_per_impression" field.
func (cc *CampaignCreate) SetCostPerImpression(f float64) *CampaignCreate {
	cc.mutation.SetCostPerImpression(f)
	return cc
}

// SetCostPerClick sets the "cost_per_click" field.
func (cc *CampaignCreate) SetCostPerClick(f float64) *CampaignCreate {
	cc.mutation.SetCostPerClick(f)
	return cc
}

// SetAdTitle sets the "ad_title" field.
func (cc *CampaignCreate) SetAdTitle(s string) *CampaignCreate {
	cc.mutation.SetAdTitle(s)
	return cc
}

// SetAdText sets the "ad_text" field.
func (cc *CampaignCreate) SetAdText(s string) *CampaignCreate {
	cc.mutation.SetAdText(s)
	return cc
}

// SetImageURL sets the "image_url" field.
func (cc *CampaignCreate) SetImageURL(s string) *CampaignCreate {
	cc.mutation.SetImageURL(s)
	return cc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableImageURL(s *string) *CampaignCreate {
	if s != nil {
		cc.SetImageURL(*s)
	}
	return cc
}

// SetStartDate sets the "start_date" field.
func (cc *CampaignCreate) SetStartDate(i int) *CampaignCreate {
	cc.mutation.SetStartDate(i)
	return cc
}

// SetEndDate sets the "end_date" field.
func (cc *CampaignCreate) SetEndDate(i int) *CampaignCreate {
	cc.mutation.SetEndDate(i)
	return cc
}

// SetModerated sets the "moderated" field.
func (cc *CampaignCreate) SetModerated(b bool) *CampaignCreate {
	cc.mutation.SetModerated(b)
	return cc
}

// SetID sets the "id" field.
func (cc *CampaignCreate) SetID(u uuid.UUID) *CampaignCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CampaignCreate) SetNillableID(u *uuid.UUID) *CampaignCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetTargetingID sets the "targeting" edge to the Targeting entity by ID.
func (cc *CampaignCreate) SetTargetingID(id int) *CampaignCreate {
	cc.mutation.SetTargetingID(id)
	return cc
}

// SetNillableTargetingID sets the "targeting" edge to the Targeting entity by ID if the given value is not nil.
func (cc *CampaignCreate) SetNillableTargetingID(id *int) *CampaignCreate {
	if id != nil {
		cc = cc.SetTargetingID(*id)
	}
	return cc
}

// SetTargeting sets the "targeting" edge to the Targeting entity.
func (cc *CampaignCreate) SetTargeting(t *Targeting) *CampaignCreate {
	return cc.SetTargetingID(t.ID)
}

// Mutation returns the CampaignMutation object of the builder.
func (cc *CampaignCreate) Mutation() *CampaignMutation {
	return cc.mutation
}

// Save creates the Campaign in the database.
func (cc *CampaignCreate) Save(ctx context.Context) (*Campaign, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CampaignCreate) SaveX(ctx context.Context) *Campaign {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CampaignCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CampaignCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CampaignCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := campaign.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CampaignCreate) check() error {
	if _, ok := cc.mutation.AdvertiserID(); !ok {
		return &ValidationError{Name: "advertiser_id", err: errors.New(`ent: missing required field "Campaign.advertiser_id"`)}
	}
	if _, ok := cc.mutation.ImpressionsLimit(); !ok {
		return &ValidationError{Name: "impressions_limit", err: errors.New(`ent: missing required field "Campaign.impressions_limit"`)}
	}
	if v, ok := cc.mutation.ImpressionsLimit(); ok {
		if err := campaign.ImpressionsLimitValidator(v); err != nil {
			return &ValidationError{Name: "impressions_limit", err: fmt.Errorf(`ent: validator failed for field "Campaign.impressions_limit": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ClicksLimit(); !ok {
		return &ValidationError{Name: "clicks_limit", err: errors.New(`ent: missing required field "Campaign.clicks_limit"`)}
	}
	if v, ok := cc.mutation.ClicksLimit(); ok {
		if err := campaign.ClicksLimitValidator(v); err != nil {
			return &ValidationError{Name: "clicks_limit", err: fmt.Errorf(`ent: validator failed for field "Campaign.clicks_limit": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CostPerImpression(); !ok {
		return &ValidationError{Name: "cost_per_impression", err: errors.New(`ent: missing required field "Campaign.cost_per_impression"`)}
	}
	if _, ok := cc.mutation.CostPerClick(); !ok {
		return &ValidationError{Name: "cost_per_click", err: errors.New(`ent: missing required field "Campaign.cost_per_click"`)}
	}
	if _, ok := cc.mutation.AdTitle(); !ok {
		return &ValidationError{Name: "ad_title", err: errors.New(`ent: missing required field "Campaign.ad_title"`)}
	}
	if v, ok := cc.mutation.AdTitle(); ok {
		if err := campaign.AdTitleValidator(v); err != nil {
			return &ValidationError{Name: "ad_title", err: fmt.Errorf(`ent: validator failed for field "Campaign.ad_title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.AdText(); !ok {
		return &ValidationError{Name: "ad_text", err: errors.New(`ent: missing required field "Campaign.ad_text"`)}
	}
	if v, ok := cc.mutation.AdText(); ok {
		if err := campaign.AdTextValidator(v); err != nil {
			return &ValidationError{Name: "ad_text", err: fmt.Errorf(`ent: validator failed for field "Campaign.ad_text": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Campaign.start_date"`)}
	}
	if v, ok := cc.mutation.StartDate(); ok {
		if err := campaign.StartDateValidator(v); err != nil {
			return &ValidationError{Name: "start_date", err: fmt.Errorf(`ent: validator failed for field "Campaign.start_date": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Campaign.end_date"`)}
	}
	if v, ok := cc.mutation.EndDate(); ok {
		if err := campaign.EndDateValidator(v); err != nil {
			return &ValidationError{Name: "end_date", err: fmt.Errorf(`ent: validator failed for field "Campaign.end_date": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Moderated(); !ok {
		return &ValidationError{Name: "moderated", err: errors.New(`ent: missing required field "Campaign.moderated"`)}
	}
	return nil
}

func (cc *CampaignCreate) sqlSave(ctx context.Context) (*Campaign, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CampaignCreate) createSpec() (*Campaign, *sqlgraph.CreateSpec) {
	var (
		_node = &Campaign{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(campaign.Table, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.AdvertiserID(); ok {
		_spec.SetField(campaign.FieldAdvertiserID, field.TypeUUID, value)
		_node.AdvertiserID = value
	}
	if value, ok := cc.mutation.ImpressionsLimit(); ok {
		_spec.SetField(campaign.FieldImpressionsLimit, field.TypeInt, value)
		_node.ImpressionsLimit = value
	}
	if value, ok := cc.mutation.ClicksLimit(); ok {
		_spec.SetField(campaign.FieldClicksLimit, field.TypeInt, value)
		_node.ClicksLimit = value
	}
	if value, ok := cc.mutation.CostPerImpression(); ok {
		_spec.SetField(campaign.FieldCostPerImpression, field.TypeFloat64, value)
		_node.CostPerImpression = value
	}
	if value, ok := cc.mutation.CostPerClick(); ok {
		_spec.SetField(campaign.FieldCostPerClick, field.TypeFloat64, value)
		_node.CostPerClick = value
	}
	if value, ok := cc.mutation.AdTitle(); ok {
		_spec.SetField(campaign.FieldAdTitle, field.TypeString, value)
		_node.AdTitle = value
	}
	if value, ok := cc.mutation.AdText(); ok {
		_spec.SetField(campaign.FieldAdText, field.TypeString, value)
		_node.AdText = value
	}
	if value, ok := cc.mutation.ImageURL(); ok {
		_spec.SetField(campaign.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := cc.mutation.StartDate(); ok {
		_spec.SetField(campaign.FieldStartDate, field.TypeInt, value)
		_node.StartDate = value
	}
	if value, ok := cc.mutation.EndDate(); ok {
		_spec.SetField(campaign.FieldEndDate, field.TypeInt, value)
		_node.EndDate = value
	}
	if value, ok := cc.mutation.Moderated(); ok {
		_spec.SetField(campaign.FieldModerated, field.TypeBool, value)
		_node.Moderated = value
	}
	if nodes := cc.mutation.TargetingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   campaign.TargetingTable,
			Columns: []string{campaign.TargetingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Campaign.Create().
//		SetAdvertiserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CampaignUpsert) {
//			SetAdvertiserID(v+v).
//		}).
//		Exec(ctx)
func (cc *CampaignCreate) OnConflict(opts ...sql.ConflictOption) *CampaignUpsertOne {
	cc.conflict = opts
	return &CampaignUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CampaignCreate) OnConflictColumns(columns ...string) *CampaignUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CampaignUpsertOne{
		create: cc,
	}
}

type (
	// CampaignUpsertOne is the builder for "upsert"-ing
	//  one Campaign node.
	CampaignUpsertOne struct {
		create *CampaignCreate
	}

	// CampaignUpsert is the "OnConflict" setter.
	CampaignUpsert struct {
		*sql.UpdateSet
	}
)

// SetAdvertiserID sets the "advertiser_id" field.
func (u *CampaignUpsert) SetAdvertiserID(v uuid.UUID) *CampaignUpsert {
	u.Set(campaign.FieldAdvertiserID, v)
	return u
}

// UpdateAdvertiserID sets the "advertiser_id" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateAdvertiserID() *CampaignUpsert {
	u.SetExcluded(campaign.FieldAdvertiserID)
	return u
}

// SetImpressionsLimit sets the "impressions_limit" field.
func (u *CampaignUpsert) SetImpressionsLimit(v int) *CampaignUpsert {
	u.Set(campaign.FieldImpressionsLimit, v)
	return u
}

// UpdateImpressionsLimit sets the "impressions_limit" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateImpressionsLimit() *CampaignUpsert {
	u.SetExcluded(campaign.FieldImpressionsLimit)
	return u
}

// AddImpressionsLimit adds v to the "impressions_limit" field.
func (u *CampaignUpsert) AddImpressionsLimit(v int) *CampaignUpsert {
	u.Add(campaign.FieldImpressionsLimit, v)
	return u
}

// SetClicksLimit sets the "clicks_limit" field.
func (u *CampaignUpsert) SetClicksLimit(v int) *CampaignUpsert {
	u.Set(campaign.FieldClicksLimit, v)
	return u
}

// UpdateClicksLimit sets the "clicks_limit" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateClicksLimit() *CampaignUpsert {
	u.SetExcluded(campaign.FieldClicksLimit)
	return u
}

// AddClicksLimit adds v to the "clicks_limit" field.
func (u *CampaignUpsert) AddClicksLimit(v int) *CampaignUpsert {
	u.Add(campaign.FieldClicksLimit, v)
	return u
}

// SetCostPerImpression sets the "cost_per_impression" field.
func (u *CampaignUpsert) SetCostPerImpression(v float64) *CampaignUpsert {
	u.Set(campaign.FieldCostPerImpression, v)
	return u
}

// UpdateCostPerImpression sets the "cost_per_impression" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateCostPerImpression() *CampaignUpsert {
	u.SetExcluded(campaign.FieldCostPerImpression)
	return u
}

// AddCostPerImpression adds v to the "cost_per_impression" field.
func (u *CampaignUpsert) AddCostPerImpression(v float64) *CampaignUpsert {
	u.Add(campaign.FieldCostPerImpression, v)
	return u
}

// SetCostPerClick sets the "cost_per_click" field.
func (u *CampaignUpsert) SetCostPerClick(v float64) *CampaignUpsert {
	u.Set(campaign.FieldCostPerClick, v)
	return u
}

// UpdateCostPerClick sets the "cost_per_click" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateCostPerClick() *CampaignUpsert {
	u.SetExcluded(campaign.FieldCostPerClick)
	return u
}

// AddCostPerClick adds v to the "cost_per_click" field.
func (u *CampaignUpsert) AddCostPerClick(v float64) *CampaignUpsert {
	u.Add(campaign.FieldCostPerClick, v)
	return u
}

// SetAdTitle sets the "ad_title" field.
func (u *CampaignUpsert) SetAdTitle(v string) *CampaignUpsert {
	u.Set(campaign.FieldAdTitle, v)
	return u
}

// UpdateAdTitle sets the "ad_title" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateAdTitle() *CampaignUpsert {
	u.SetExcluded(campaign.FieldAdTitle)
	return u
}

// SetAdText sets the "ad_text" field.
func (u *CampaignUpsert) SetAdText(v string) *CampaignUpsert {
	u.Set(campaign.FieldAdText, v)
	return u
}

// UpdateAdText sets the "ad_text" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateAdText() *CampaignUpsert {
	u.SetExcluded(campaign.FieldAdText)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *CampaignUpsert) SetImageURL(v string) *CampaignUpsert {
	u.Set(campaign.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateImageURL() *CampaignUpsert {
	u.SetExcluded(campaign.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *CampaignUpsert) ClearImageURL() *CampaignUpsert {
	u.SetNull(campaign.FieldImageURL)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *CampaignUpsert) SetStartDate(v int) *CampaignUpsert {
	u.Set(campaign.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateStartDate() *CampaignUpsert {
	u.SetExcluded(campaign.FieldStartDate)
	return u
}

// AddStartDate adds v to the "start_date" field.
func (u *CampaignUpsert) AddStartDate(v int) *CampaignUpsert {
	u.Add(campaign.FieldStartDate, v)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *CampaignUpsert) SetEndDate(v int) *CampaignUpsert {
	u.Set(campaign.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateEndDate() *CampaignUpsert {
	u.SetExcluded(campaign.FieldEndDate)
	return u
}

// AddEndDate adds v to the "end_date" field.
func (u *CampaignUpsert) AddEndDate(v int) *CampaignUpsert {
	u.Add(campaign.FieldEndDate, v)
	return u
}

// SetModerated sets the "moderated" field.
func (u *CampaignUpsert) SetModerated(v bool) *CampaignUpsert {
	u.Set(campaign.FieldModerated, v)
	return u
}

// UpdateModerated sets the "moderated" field to the value that was provided on create.
func (u *CampaignUpsert) UpdateModerated() *CampaignUpsert {
	u.SetExcluded(campaign.FieldModerated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(campaign.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CampaignUpsertOne) UpdateNewValues() *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(campaign.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Campaign.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CampaignUpsertOne) Ignore() *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CampaignUpsertOne) DoNothing() *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CampaignCreate.OnConflict
// documentation for more info.
func (u *CampaignUpsertOne) Update(set func(*CampaignUpsert)) *CampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CampaignUpsert{UpdateSet: update})
	}))
	return u
}

// SetAdvertiserID sets the "advertiser_id" field.
func (u *CampaignUpsertOne) SetAdvertiserID(v uuid.UUID) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetAdvertiserID(v)
	})
}

// UpdateAdvertiserID sets the "advertiser_id" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateAdvertiserID() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateAdvertiserID()
	})
}

// SetImpressionsLimit sets the "impressions_limit" field.
func (u *CampaignUpsertOne) SetImpressionsLimit(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetImpressionsLimit(v)
	})
}

// AddImpressionsLimit adds v to the "impressions_limit" field.
func (u *CampaignUpsertOne) AddImpressionsLimit(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddImpressionsLimit(v)
	})
}

// UpdateImpressionsLimit sets the "impressions_limit" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateImpressionsLimit() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateImpressionsLimit()
	})
}

// SetClicksLimit sets the "clicks_limit" field.
func (u *CampaignUpsertOne) SetClicksLimit(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetClicksLimit(v)
	})
}

// AddClicksLimit adds v to the "clicks_limit" field.
func (u *CampaignUpsertOne) AddClicksLimit(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddClicksLimit(v)
	})
}

// UpdateClicksLimit sets the "clicks_limit" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateClicksLimit() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateClicksLimit()
	})
}

// SetCostPerImpression sets the "cost_per_impression" field.
func (u *CampaignUpsertOne) SetCostPerImpression(v float64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetCostPerImpression(v)
	})
}

// AddCostPerImpression adds v to the "cost_per_impression" field.
func (u *CampaignUpsertOne) AddCostPerImpression(v float64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddCostPerImpression(v)
	})
}

// UpdateCostPerImpression sets the "cost_per_impression" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateCostPerImpression() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateCostPerImpression()
	})
}

// SetCostPerClick sets the "cost_per_click" field.
func (u *CampaignUpsertOne) SetCostPerClick(v float64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetCostPerClick(v)
	})
}

// AddCostPerClick adds v to the "cost_per_click" field.
func (u *CampaignUpsertOne) AddCostPerClick(v float64) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddCostPerClick(v)
	})
}

// UpdateCostPerClick sets the "cost_per_click" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateCostPerClick() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateCostPerClick()
	})
}

// SetAdTitle sets the "ad_title" field.
func (u *CampaignUpsertOne) SetAdTitle(v string) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetAdTitle(v)
	})
}

// UpdateAdTitle sets the "ad_title" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateAdTitle() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateAdTitle()
	})
}

// SetAdText sets the "ad_text" field.
func (u *CampaignUpsertOne) SetAdText(v string) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetAdText(v)
	})
}

// UpdateAdText sets the "ad_text" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateAdText() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateAdText()
	})
}

// SetImageURL sets the "image_url" field.
func (u *CampaignUpsertOne) SetImageURL(v string) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateImageURL() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *CampaignUpsertOne) ClearImageURL() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.ClearImageURL()
	})
}

// SetStartDate sets the "start_date" field.
func (u *CampaignUpsertOne) SetStartDate(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetStartDate(v)
	})
}

// AddStartDate adds v to the "start_date" field.
func (u *CampaignUpsertOne) AddStartDate(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateStartDate() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *CampaignUpsertOne) SetEndDate(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetEndDate(v)
	})
}

// AddEndDate adds v to the "end_date" field.
func (u *CampaignUpsertOne) AddEndDate(v int) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.AddEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateEndDate() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateEndDate()
	})
}

// SetModerated sets the "moderated" field.
func (u *CampaignUpsertOne) SetModerated(v bool) *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.SetModerated(v)
	})
}

// UpdateModerated sets the "moderated" field to the value that was provided on create.
func (u *CampaignUpsertOne) UpdateModerated() *CampaignUpsertOne {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateModerated()
	})
}

// Exec executes the query.
func (u *CampaignUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CampaignCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CampaignUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CampaignUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CampaignUpsertOne.ID is not supported by MySQL driver. Use CampaignUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CampaignUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CampaignCreateBulk is the builder for creating many Campaign entities in bulk.
type CampaignCreateBulk struct {
	config
	err      error
	builders []*CampaignCreate
	conflict []sql.ConflictOption
}

// Save creates the Campaign entities in the database.
func (ccb *CampaignCreateBulk) Save(ctx context.Context) ([]*Campaign, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Campaign, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CampaignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CampaignCreateBulk) SaveX(ctx context.Context) []*Campaign {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CampaignCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CampaignCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Campaign.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CampaignUpsert) {
//			SetAdvertiserID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CampaignCreateBulk) OnConflict(opts ...sql.ConflictOption) *CampaignUpsertBulk {
	ccb.conflict = opts
	return &CampaignUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CampaignCreateBulk) OnConflictColumns(columns ...string) *CampaignUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CampaignUpsertBulk{
		create: ccb,
	}
}

// CampaignUpsertBulk is the builder for "upsert"-ing
// a bulk of Campaign nodes.
type CampaignUpsertBulk struct {
	create *CampaignCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(campaign.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CampaignUpsertBulk) UpdateNewValues() *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(campaign.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Campaign.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CampaignUpsertBulk) Ignore() *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CampaignUpsertBulk) DoNothing() *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CampaignCreateBulk.OnConflict
// documentation for more info.
func (u *CampaignUpsertBulk) Update(set func(*CampaignUpsert)) *CampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CampaignUpsert{UpdateSet: update})
	}))
	return u
}

// SetAdvertiserID sets the "advertiser_id" field.
func (u *CampaignUpsertBulk) SetAdvertiserID(v uuid.UUID) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetAdvertiserID(v)
	})
}

// UpdateAdvertiserID sets the "advertiser_id" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateAdvertiserID() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateAdvertiserID()
	})
}

// SetImpressionsLimit sets the "impressions_limit" field.
func (u *CampaignUpsertBulk) SetImpressionsLimit(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetImpressionsLimit(v)
	})
}

// AddImpressionsLimit adds v to the "impressions_limit" field.
func (u *CampaignUpsertBulk) AddImpressionsLimit(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddImpressionsLimit(v)
	})
}

// UpdateImpressionsLimit sets the "impressions_limit" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateImpressionsLimit() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateImpressionsLimit()
	})
}

// SetClicksLimit sets the "clicks_limit" field.
func (u *CampaignUpsertBulk) SetClicksLimit(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetClicksLimit(v)
	})
}

// AddClicksLimit adds v to the "clicks_limit" field.
func (u *CampaignUpsertBulk) AddClicksLimit(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddClicksLimit(v)
	})
}

// UpdateClicksLimit sets the "clicks_limit" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateClicksLimit() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateClicksLimit()
	})
}

// SetCostPerImpression sets the "cost_per_impression" field.
func (u *CampaignUpsertBulk) SetCostPerImpression(v float64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetCostPerImpression(v)
	})
}

// AddCostPerImpression adds v to the "cost_per_impression" field.
func (u *CampaignUpsertBulk) AddCostPerImpression(v float64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddCostPerImpression(v)
	})
}

// UpdateCostPerImpression sets the "cost_per_impression" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateCostPerImpression() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateCostPerImpression()
	})
}

// SetCostPerClick sets the "cost_per_click" field.
func (u *CampaignUpsertBulk) SetCostPerClick(v float64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetCostPerClick(v)
	})
}

// AddCostPerClick adds v to the "cost_per_click" field.
func (u *CampaignUpsertBulk) AddCostPerClick(v float64) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddCostPerClick(v)
	})
}

// UpdateCostPerClick sets the "cost_per_click" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateCostPerClick() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateCostPerClick()
	})
}

// SetAdTitle sets the "ad_title" field.
func (u *CampaignUpsertBulk) SetAdTitle(v string) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetAdTitle(v)
	})
}

// UpdateAdTitle sets the "ad_title" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateAdTitle() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateAdTitle()
	})
}

// SetAdText sets the "ad_text" field.
func (u *CampaignUpsertBulk) SetAdText(v string) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetAdText(v)
	})
}

// UpdateAdText sets the "ad_text" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateAdText() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateAdText()
	})
}

// SetImageURL sets the "image_url" field.
func (u *CampaignUpsertBulk) SetImageURL(v string) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateImageURL() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *CampaignUpsertBulk) ClearImageURL() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.ClearImageURL()
	})
}

// SetStartDate sets the "start_date" field.
func (u *CampaignUpsertBulk) SetStartDate(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetStartDate(v)
	})
}

// AddStartDate adds v to the "start_date" field.
func (u *CampaignUpsertBulk) AddStartDate(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateStartDate() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *CampaignUpsertBulk) SetEndDate(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetEndDate(v)
	})
}

// AddEndDate adds v to the "end_date" field.
func (u *CampaignUpsertBulk) AddEndDate(v int) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.AddEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateEndDate() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateEndDate()
	})
}

// SetModerated sets the "moderated" field.
func (u *CampaignUpsertBulk) SetModerated(v bool) *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.SetModerated(v)
	})
}

// UpdateModerated sets the "moderated" field to the value that was provided on create.
func (u *CampaignUpsertBulk) UpdateModerated() *CampaignUpsertBulk {
	return u.Update(func(s *CampaignUpsert) {
		s.UpdateModerated()
	})
}

// Exec executes the query.
func (u *CampaignUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CampaignCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CampaignCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CampaignUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/campaign"
	"nlypage-final/internal/adapters/database/postgres/ent/predicate"
	"nlypage-final/internal/adapters/database/postgres/ent/targeting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CampaignUpdate is the builder for updating Campaign entities.
type CampaignUpdate struct {
	config
	hooks    []Hook
	mutation *CampaignMutation
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cu *CampaignUpdate) Where(ps ...predicate.Campaign) *CampaignUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetAdvertiserID sets the "advertiser_id" field.
func (cu *CampaignUpdate) SetAdvertiserID(u uuid.UUID) *CampaignUpdate {
	cu.mutation.SetAdvertiserID(u)
	return cu
}

// SetNillableAdvertiserID sets the "advertiser_id" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableAdvertiserID(u *uuid.UUID) *CampaignUpdate {
	if u != nil {
		cu.SetAdvertiserID(*u)
	}
	return cu
}

// SetImpressionsLimit sets the "impressions_limit" field.
func (cu *CampaignUpdate) SetImpressionsLimit(i int) *CampaignUpdate {
	cu.mutation.ResetImpressionsLimit()
	cu.mutation.SetImpressionsLimit(i)
	return cu
}

// SetNillableImpressionsLimit sets the "impressions_limit" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableImpressionsLimit(i *int) *CampaignUpdate {
	if i != nil {
		cu.SetImpressionsLimit(*i)
	}
	return cu
}

// AddImpressionsLimit adds i to the "impressions_limit" field.
func (cu *CampaignUpdate) AddImpressionsLimit(i int) *CampaignUpdate {
	cu.mutation.AddImpressionsLimit(i)
	return cu
}

// SetClicksLimit sets the "clicks_limit" field.
func (cu *CampaignUpdate) SetClicksLimit(i int) *CampaignUpdate {
	cu.mutation.ResetClicksLimit()
	cu.mutation.SetClicksLimit(i)
	return cu
}

// SetNillableClicksLimit sets the "clicks_limit" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableClicksLimit(i *int) *CampaignUpdate {
	if i != nil {
		cu.SetClicksLimit(*i)
	}
	return cu
}

// AddClicksLimit adds i to the "clicks_limit" field.
func (cu *CampaignUpdate) AddClicksLimit(i int) *CampaignUpdate {
	cu.mutation.AddClicksLimit(i)
	return cu
}

// SetCostPerImpression sets the "cost_per_impression" field.
func (cu *CampaignUpdate) SetCostPerImpression(f float64) *CampaignUpdate {
	cu.mutation.ResetCostPerImpression()
	cu.mutation.SetCostPerImpression(f)
	return cu
}

// SetNillableCostPerImpression sets the "cost_per_impression" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableCostPerImpression(f *float64) *CampaignUpdate {
	if f != nil {
		cu.SetCostPerImpression(*f)
	}
	return cu
}

// AddCostPerImpression adds f to the "cost_per_impression" field.
func (cu *CampaignUpdate) AddCostPerImpression(f float64) *CampaignUpdate {
	cu.mutation.AddCostPerImpression(f)
	return cu
}

// SetCostPerClick sets the "cost_per_click" field.
func (cu *CampaignUpdate) SetCostPerClick(f float64) *CampaignUpdate {
	cu.mutation.ResetCostPerClick()
	cu.mutation.SetCostPerClick(f)
	return cu
}

// SetNillableCostPerClick sets the "cost_per_click" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableCostPerClick(f *float64) *CampaignUpdate {
	if f != nil {
		cu.SetCostPerClick(*f)
	}
	return cu
}

// AddCostPerClick adds f to the "cost_per_click" field.
func (cu *CampaignUpdate) AddCostPerClick(f float64) *CampaignUpdate {
	cu.mutation.AddCostPerClick(f)
	return cu
}

// SetAdTitle sets the "ad_title" field.
func (cu *CampaignUpdate) SetAdTitle(s string) *CampaignUpdate {
	cu.mutation.SetAdTitle(s)
	return cu
}

// SetNillableAdTitle sets the "ad_title" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableAdTitle(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetAdTitle(*s)
	}
	return cu
}

// SetAdText sets the "ad_text" field.
func (cu *CampaignUpdate) SetAdText(s string) *CampaignUpdate {
	cu.mutation.SetAdText(s)
	return cu
}

// SetNillableAdText sets the "ad_text" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableAdText(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetAdText(*s)
	}
	return cu
}

// SetImageURL sets the "image_url" field.
func (cu *CampaignUpdate) SetImageURL(s string) *CampaignUpdate {
	cu.mutation.SetImageURL(s)
	return cu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableImageURL(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetImageURL(*s)
	}
	return cu
}

// ClearImageURL clears the value of the "image_url" field.
func (cu *CampaignUpdate) ClearImageURL() *CampaignUpdate {
	cu.mutation.ClearImageURL()
	return cu
}

// SetStartDate sets the "start_date" field.
func (cu *CampaignUpdate) SetStartDate(i int) *CampaignUpdate {
	cu.mutation.ResetStartDate()
	cu.mutation.SetStartDate(i)
	return cu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableStartDate(i *int) *CampaignUpdate {
	if i != nil {
		cu.SetStartDate(*i)
	}
	return cu
}

// AddStartDate adds i to the "start_date" field.
func (cu *CampaignUpdate) AddStartDate(i int) *CampaignUpdate {
	cu.mutation.AddStartDate(i)
	return cu
}

// SetEndDate sets the "end_date" field.
func (cu *CampaignUpdate) SetEndDate(i int) *CampaignUpdate {
	cu.mutation.ResetEndDate()
	cu.mutation.SetEndDate(i)
	return cu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableEndDate(i *int) *CampaignUpdate {
	if i != nil {
		cu.SetEndDate(*i)
	}
	return cu
}

// AddEndDate adds i to the "end_date" field.
func (cu *CampaignUpdate) AddEndDate(i int) *CampaignUpdate {
	cu.mutation.AddEndDate(i)
	return cu
}

// SetModerated sets the "moderated" field.
func (cu *CampaignUpdate) SetModerated(b bool) *CampaignUpdate {
	cu.mutation.SetModerated(b)
	return cu
}

// SetNillableModerated sets the "moderated" field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableModerated(b *bool) *CampaignUpdate {
	if b != nil {
		cu.SetModerated(*b)
	}
	return cu
}

// SetTargetingID sets the "targeting" edge to the Targeting entity by ID.
func (cu *CampaignUpdate) SetTargetingID(id int) *CampaignUpdate {
	cu.mutation.SetTargetingID(id)
	return cu
}

// SetNillableTargetingID sets the "targeting" edge to the Targeting entity by ID if the given value is not nil.
func (cu *CampaignUpdate) SetNillableTargetingID(id *int) *CampaignUpdate {
	if id != nil {
		cu = cu.SetTargetingID(*id)
	}
	return cu
}

// SetTargeting sets the "targeting" edge to the Targeting entity.
func (cu *CampaignUpdate) SetTargeting(t *Targeting) *CampaignUpdate {
	return cu.SetTargetingID(t.ID)
}

// Mutation returns the CampaignMutation object of the builder.
func (cu *CampaignUpdate) Mutation() *CampaignMutation {
	return cu.mutation
}

// ClearTargeting clears the "targeting" edge to the Targeting entity.
func (cu *CampaignUpdate) ClearTargeting() *CampaignUpdate {
	cu.mutation.ClearTargeting()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CampaignUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CampaignUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CampaignUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CampaignUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CampaignUpdate) check() error {
	if v, ok := cu.mutation.ImpressionsLimit(); ok {
		if err := campaign.ImpressionsLimitValidator(v); err != nil {
			return &ValidationError{Name: "impressions_limit", err: fmt.Errorf(`ent: validator failed for field "Campaign.impressions_limit": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ClicksLimit(); ok {
		if err := campaign.ClicksLimitValidator(v); err != nil {
			return &ValidationError{Name: "clicks_limit", err: fmt.Errorf(`ent: validator failed for field "Campaign.clicks_limit": %w`, err)}
		}
	}
	if v, ok := cu.mutation.AdTitle(); ok {
		if err := campaign.AdTitleValidator(v); err != nil {
			return &ValidationError{Name: "ad_title", err: fmt.Errorf(`ent: validator failed for field "Campaign.ad_title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.AdText(); ok {
		if err := campaign.AdTextValidator(v); err != nil {
			return &ValidationError{Name: "ad_text", err: fmt.Errorf(`ent: validator failed for field "Campaign.ad_text": %w`, err)}
		}
	}
	if v, ok := cu.mutation.StartDate(); ok {
		if err := campaign.StartDateValidator(v); err != nil {
			return &ValidationError{Name: "start_date", err: fmt.Errorf(`ent: validator failed for field "Campaign.start_date": %w`, err)}
		}
	}
	if v, ok := cu.mutation.EndDate(); ok {
		if err := campaign.EndDateValidator(v); err != nil {
			return &ValidationError{Name: "end_date", err: fmt.Errorf(`ent: validator failed for field "Campaign.end_date": %w`, err)}
		}
	}
	return nil
}

func (cu *CampaignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.AdvertiserID(); ok {
		_spec.SetField(campaign.FieldAdvertiserID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.ImpressionsLimit(); ok {
		_spec.SetField(campaign.FieldImpressionsLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedImpressionsLimit(); ok {
		_spec.AddField(campaign.FieldImpressionsLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ClicksLimit(); ok {
		_spec.SetField(campaign.FieldClicksLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedClicksLimit(); ok {
		_spec.AddField(campaign.FieldClicksLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.CostPerImpression(); ok {
		_spec.SetField(campaign.FieldCostPerImpression, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedCostPerImpression(); ok {
		_spec.AddField(campaign.FieldCostPerImpression, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.CostPerClick(); ok {
		_spec.SetField(campaign.FieldCostPerClick, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedCostPerClick(); ok {
		_spec.AddField(campaign.FieldCostPerClick, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AdTitle(); ok {
		_spec.SetField(campaign.FieldAdTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.AdText(); ok {
		_spec.SetField(campaign.FieldAdText, field.TypeString, value)
	}
	if value, ok := cu.mutation.ImageURL(); ok {
		_spec.SetField(campaign.FieldImageURL, field.TypeString, value)
	}
	if cu.mutation.ImageURLCleared() {
		_spec.ClearField(campaign.FieldImageURL, field.TypeString)
	}
	if value, ok := cu.mutation.StartDate(); ok {
		_spec.SetField(campaign.FieldStartDate, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStartDate(); ok {
		_spec.AddField(campaign.FieldStartDate, field.TypeInt, value)
	}
	if value, ok := cu.mutation.EndDate(); ok {
		_spec.SetField(campaign.FieldEndDate, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedEndDate(); ok {
		_spec.AddField(campaign.FieldEndDate, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Moderated(); ok {
		_spec.SetField(campaign.FieldModerated, field.TypeBool, value)
	}
	if cu.mutation.TargetingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   campaign.TargetingTable,
			Columns: []string{campaign.TargetingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TargetingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   campaign.TargetingTable,
			Columns: []string{campaign.TargetingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CampaignUpdateOne is the builder for updating a single Campaign entity.
type CampaignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CampaignMutation
}

// SetAdvertiserID sets the "advertiser_id" field.
func (cuo *CampaignUpdateOne) SetAdvertiserID(u uuid.UUID) *CampaignUpdateOne {
	cuo.mutation.SetAdvertiserID(u)
	return cuo
}

// SetNillableAdvertiserID sets the "advertiser_id" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableAdvertiserID(u *uuid.UUID) *CampaignUpdateOne {
	if u != nil {
		cuo.SetAdvertiserID(*u)
	}
	return cuo
}

// SetImpressionsLimit sets the "impressions_limit" field.
func (cuo *CampaignUpdateOne) SetImpressionsLimit(i int) *CampaignUpdateOne {
	cuo.mutation.ResetImpressionsLimit()
	cuo.mutation.SetImpressionsLimit(i)
	return cuo
}

// SetNillableImpressionsLimit sets the "impressions_limit" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableImpressionsLimit(i *int) *CampaignUpdateOne {
	if i != nil {
		cuo.SetImpressionsLimit(*i)
	}
	return cuo
}

// AddImpressionsLimit adds i to the "impressions_limit" field.
func (cuo *CampaignUpdateOne) AddImpressionsLimit(i int) *CampaignUpdateOne {
	cuo.mutation.AddImpressionsLimit(i)
	return cuo
}

// SetClicksLimit sets the "clicks_limit" field.
func (cuo *CampaignUpdateOne) SetClicksLimit(i int) *CampaignUpdateOne {
	cuo.mutation.ResetClicksLimit()
	cuo.mutation.SetClicksLimit(i)
	return cuo
}

// SetNillableClicksLimit sets the "clicks_limit" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableClicksLimit(i *int) *CampaignUpdateOne {
	if i != nil {
		cuo.SetClicksLimit(*i)
	}
	return cuo
}

// AddClicksLimit adds i to the "clicks_limit" field.
func (cuo *CampaignUpdateOne) AddClicksLimit(i int) *CampaignUpdateOne {
	cuo.mutation.AddClicksLimit(i)
	return cuo
}

// SetCostPerImpression sets the "cost_per_impression" field.
func (cuo *CampaignUpdateOne) SetCostPerImpression(f float64) *CampaignUpdateOne {
	cuo.mutation.ResetCostPerImpression()
	cuo.mutation.SetCostPerImpression(f)
	return cuo
}

// SetNillableCostPerImpression sets the "cost_per_impression" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableCostPerImpression(f *float64) *CampaignUpdateOne {
	if f != nil {
		cuo.SetCostPerImpression(*f)
	}
	return cuo
}

// AddCostPerImpression adds f to the "cost_per_impression" field.
func (cuo *CampaignUpdateOne) AddCostPerImpression(f float64) *CampaignUpdateOne {
	cuo.mutation.AddCostPerImpression(f)
	return cuo
}

// SetCostPerClick sets the "cost_per_click" field.
func (cuo *CampaignUpdateOne) SetCostPerClick(f float64) *CampaignUpdateOne {
	cuo.mutation.ResetCostPerClick()
	cuo.mutation.SetCostPerClick(f)
	return cuo
}

// SetNillableCostPerClick sets the "cost_per_click" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableCostPerClick(f *float64) *CampaignUpdateOne {
	if f != nil {
		cuo.SetCostPerClick(*f)
	}
	return cuo
}

// AddCostPerClick adds f to the "cost_per_click" field.
func (cuo *CampaignUpdateOne) AddCostPerClick(f float64) *CampaignUpdateOne {
	cuo.mutation.AddCostPerClick(f)
	return cuo
}

// SetAdTitle sets the "ad_title" field.
func (cuo *CampaignUpdateOne) SetAdTitle(s string) *CampaignUpdateOne {
	cuo.mutation.SetAdTitle(s)
	return cuo
}

// SetNillableAdTitle sets the "ad_title" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableAdTitle(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetAdTitle(*s)
	}
	return cuo
}

// SetAdText sets the "ad_text" field.
func (cuo *CampaignUpdateOne) SetAdText(s string) *CampaignUpdateOne {
	cuo.mutation.SetAdText(s)
	return cuo
}

// SetNillableAdText sets the "ad_text" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableAdText(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetAdText(*s)
	}
	return cuo
}

// SetImageURL sets the "image_url" field.
func (cuo *CampaignUpdateOne) SetImageURL(s string) *CampaignUpdateOne {
	cuo.mutation.SetImageURL(s)
	return cuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableImageURL(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetImageURL(*s)
	}
	return cuo
}

// ClearImageURL clears the value of the "image_url" field.
func (cuo *CampaignUpdateOne) ClearImageURL() *CampaignUpdateOne {
	cuo.mutation.ClearImageURL()
	return cuo
}

// SetStartDate sets the "start_date" field.
func (cuo *CampaignUpdateOne) SetStartDate(i int) *CampaignUpdateOne {
	cuo.mutation.ResetStartDate()
	cuo.mutation.SetStartDate(i)
	return cuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableStartDate(i *int) *CampaignUpdateOne {
	if i != nil {
		cuo.SetStartDate(*i)
	}
	return cuo
}

// AddStartDate adds i to the "start_date" field.
func (cuo *CampaignUpdateOne) AddStartDate(i int) *CampaignUpdateOne {
	cuo.mutation.AddStartDate(i)
	return cuo
}

// SetEndDate sets the "end_date" field.
func (cuo *CampaignUpdateOne) SetEndDate(i int) *CampaignUpdateOne {
	cuo.mutation.ResetEndDate()
	cuo.mutation.SetEndDate(i)
	return cuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableEndDate(i *int) *CampaignUpdateOne {
	if i != nil {
		cuo.SetEndDate(*i)
	}
	return cuo
}

// AddEndDate adds i to the "end_date" field.
func (cuo *CampaignUpdateOne) AddEndDate(i int) *CampaignUpdateOne {
	cuo.mutation.AddEndDate(i)
	return cuo
}

// SetModerated sets the "moderated" field.
func (cuo *CampaignUpdateOne) SetModerated(b bool) *CampaignUpdateOne {
	cuo.mutation.SetModerated(b)
	return cuo
}

// SetNillableModerated sets the "moderated" field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableModerated(b *bool) *CampaignUpdateOne {
	if b != nil {
		cuo.SetModerated(*b)
	}
	return cuo
}

// SetTargetingID sets the "targeting" edge to the Targeting entity by ID.
func (cuo *CampaignUpdateOne) SetTargetingID(id int) *CampaignUpdateOne {
	cuo.mutation.SetTargetingID(id)
	return cuo
}

// SetNillableTargetingID sets the "targeting" edge to the Targeting entity by ID if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableTargetingID(id *int) *CampaignUpdateOne {
	if id != nil {
		cuo = cuo.SetTargetingID(*id)
	}
	return cuo
}

// SetTargeting sets the "targeting" edge to the Targeting entity.
func (cuo *CampaignUpdateOne) SetTargeting(t *Targeting) *CampaignUpdateOne {
	return cuo.SetTargetingID(t.ID)
}

// Mutation returns the CampaignMutation object of the builder.
func (cuo *CampaignUpdateOne) Mutation() *CampaignMutation {
	return cuo.mutation
}

// ClearTargeting clears the "targeting" edge to the Targeting entity.
func (cuo *CampaignUpdateOne) ClearTargeting() *CampaignUpdateOne {
	cuo.mutation.ClearTargeting()
	return cuo
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cuo *CampaignUpdateOne) Where(ps ...predicate.Campaign) *CampaignUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CampaignUpdateOne) Select(field string, fields ...string) *CampaignUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Campaign entity.
func (cuo *CampaignUpdateOne) Save(ctx context.Context) (*Campaign, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CampaignUpdateOne) SaveX(ctx context.Context) *Campaign {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CampaignUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CampaignUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CampaignUpdateOne) check() error {
	if v, ok := cuo.mutation.ImpressionsLimit(); ok {
		if err := campaign.ImpressionsLimitValidator(v); err != nil {
			return &ValidationError{Name: "impressions_limit", err: fmt.Errorf(`ent: validator failed for field "Campaign.impressions_limit": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ClicksLimit(); ok {
		if err := campaign.ClicksLimitValidator(v); err != nil {
			return &ValidationError{Name: "clicks_limit", err: fmt.Errorf(`ent: validator failed for field "Campaign.clicks_limit": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.AdTitle(); ok {
		if err := campaign.AdTitleValidator(v); err != nil {
			return &ValidationError{Name: "ad_title", err: fmt.Errorf(`ent: validator failed for field "Campaign.ad_title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.AdText(); ok {
		if err := campaign.AdTextValidator(v); err != nil {
			return &ValidationError{Name: "ad_text", err: fmt.Errorf(`ent: validator failed for field "Campaign.ad_text": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.StartDate(); ok {
		if err := campaign.StartDateValidator(v); err != nil {
			return &ValidationError{Name: "start_date", err: fmt.Errorf(`ent: validator failed for field "Campaign.start_date": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.EndDate(); ok {
		if err := campaign.EndDateValidator(v); err != nil {
			return &ValidationError{Name: "end_date", err: fmt.Errorf(`ent: validator failed for field "Campaign.end_date": %w`, err)}
		}
	}
	return nil
}

func (cuo *CampaignUpdateOne) sqlSave(ctx context.Context) (_node *Campaign, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Campaign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, campaign.FieldID)
		for _, f := range fields {
			if !campaign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != campaign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.AdvertiserID(); ok {
		_spec.SetField(campaign.FieldAdvertiserID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.ImpressionsLimit(); ok {
		_spec.SetField(campaign.FieldImpressionsLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedImpressionsLimit(); ok {
		_spec.AddField(campaign.FieldImpressionsLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ClicksLimit(); ok {
		_spec.SetField(campaign.FieldClicksLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedClicksLimit(); ok {
		_spec.AddField(campaign.FieldClicksLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.CostPerImpression(); ok {
		_spec.SetField(campaign.FieldCostPerImpression, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedCostPerImpression(); ok {
		_spec.AddField(campaign.FieldCostPerImpression, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.CostPerClick(); ok {
		_spec.SetField(campaign.FieldCostPerClick, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedCostPerClick(); ok {
		_spec.AddField(campaign.FieldCostPerClick, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AdTitle(); ok {
		_spec.SetField(campaign.FieldAdTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AdText(); ok {
		_spec.SetField(campaign.FieldAdText, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ImageURL(); ok {
		_spec.SetField(campaign.FieldImageURL, field.TypeString, value)
	}
	if cuo.mutation.ImageURLCleared() {
		_spec.ClearField(campaign.FieldImageURL, field.TypeString)
	}
	if value, ok := cuo.mutation.StartDate(); ok {
		_spec.SetField(campaign.FieldStartDate, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStartDate(); ok {
		_spec.AddField(campaign.FieldStartDate, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.EndDate(); ok {
		_spec.SetField(campaign.FieldEndDate, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedEndDate(); ok {
		_spec.AddField(campaign.FieldEndDate, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Moderated(); ok {
		_spec.SetField(campaign.FieldModerated, field.TypeBool, value)
	}
	if cuo.mutation.TargetingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   campaign.TargetingTable,
			Columns: []string{campaign.TargetingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TargetingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   campaign.TargetingTable,
			Columns: []string{campaign.TargetingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Campaign{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

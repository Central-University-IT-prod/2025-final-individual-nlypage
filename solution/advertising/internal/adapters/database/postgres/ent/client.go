// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"nlypage-final/internal/adapters/database/postgres/ent/migrate"

	"nlypage-final/internal/adapters/database/postgres/ent/advertiser"
	"nlypage-final/internal/adapters/database/postgres/ent/campaign"
	"nlypage-final/internal/adapters/database/postgres/ent/mlscore"
	"nlypage-final/internal/adapters/database/postgres/ent/targeting"
	"nlypage-final/internal/adapters/database/postgres/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Advertiser is the client for interacting with the Advertiser builders.
	Advertiser *AdvertiserClient
	// Campaign is the client for interacting with the Campaign builders.
	Campaign *CampaignClient
	// MlScore is the client for interacting with the MlScore builders.
	MlScore *MlScoreClient
	// Targeting is the client for interacting with the Targeting builders.
	Targeting *TargetingClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Advertiser = NewAdvertiserClient(c.config)
	c.Campaign = NewCampaignClient(c.config)
	c.MlScore = NewMlScoreClient(c.config)
	c.Targeting = NewTargetingClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Advertiser: NewAdvertiserClient(cfg),
		Campaign:   NewCampaignClient(cfg),
		MlScore:    NewMlScoreClient(cfg),
		Targeting:  NewTargetingClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Advertiser: NewAdvertiserClient(cfg),
		Campaign:   NewCampaignClient(cfg),
		MlScore:    NewMlScoreClient(cfg),
		Targeting:  NewTargetingClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Advertiser.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Advertiser.Use(hooks...)
	c.Campaign.Use(hooks...)
	c.MlScore.Use(hooks...)
	c.Targeting.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Advertiser.Intercept(interceptors...)
	c.Campaign.Intercept(interceptors...)
	c.MlScore.Intercept(interceptors...)
	c.Targeting.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdvertiserMutation:
		return c.Advertiser.mutate(ctx, m)
	case *CampaignMutation:
		return c.Campaign.mutate(ctx, m)
	case *MlScoreMutation:
		return c.MlScore.mutate(ctx, m)
	case *TargetingMutation:
		return c.Targeting.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdvertiserClient is a client for the Advertiser schema.
type AdvertiserClient struct {
	config
}

// NewAdvertiserClient returns a client for the Advertiser from the given config.
func NewAdvertiserClient(c config) *AdvertiserClient {
	return &AdvertiserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `advertiser.Hooks(f(g(h())))`.
func (c *AdvertiserClient) Use(hooks ...Hook) {
	c.hooks.Advertiser = append(c.hooks.Advertiser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `advertiser.Intercept(f(g(h())))`.
func (c *AdvertiserClient) Intercept(interceptors ...Interceptor) {
	c.inters.Advertiser = append(c.inters.Advertiser, interceptors...)
}

// Create returns a builder for creating a Advertiser entity.
func (c *AdvertiserClient) Create() *AdvertiserCreate {
	mutation := newAdvertiserMutation(c.config, OpCreate)
	return &AdvertiserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Advertiser entities.
func (c *AdvertiserClient) CreateBulk(builders ...*AdvertiserCreate) *AdvertiserCreateBulk {
	return &AdvertiserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdvertiserClient) MapCreateBulk(slice any, setFunc func(*AdvertiserCreate, int)) *AdvertiserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdvertiserCreateBulk{err: fmt.Errorf("calling to AdvertiserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdvertiserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdvertiserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Advertiser.
func (c *AdvertiserClient) Update() *AdvertiserUpdate {
	mutation := newAdvertiserMutation(c.config, OpUpdate)
	return &AdvertiserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdvertiserClient) UpdateOne(a *Advertiser) *AdvertiserUpdateOne {
	mutation := newAdvertiserMutation(c.config, OpUpdateOne, withAdvertiser(a))
	return &AdvertiserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdvertiserClient) UpdateOneID(id uuid.UUID) *AdvertiserUpdateOne {
	mutation := newAdvertiserMutation(c.config, OpUpdateOne, withAdvertiserID(id))
	return &AdvertiserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Advertiser.
func (c *AdvertiserClient) Delete() *AdvertiserDelete {
	mutation := newAdvertiserMutation(c.config, OpDelete)
	return &AdvertiserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdvertiserClient) DeleteOne(a *Advertiser) *AdvertiserDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdvertiserClient) DeleteOneID(id uuid.UUID) *AdvertiserDeleteOne {
	builder := c.Delete().Where(advertiser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdvertiserDeleteOne{builder}
}

// Query returns a query builder for Advertiser.
func (c *AdvertiserClient) Query() *AdvertiserQuery {
	return &AdvertiserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdvertiser},
		inters: c.Interceptors(),
	}
}

// Get returns a Advertiser entity by its id.
func (c *AdvertiserClient) Get(ctx context.Context, id uuid.UUID) (*Advertiser, error) {
	return c.Query().Where(advertiser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdvertiserClient) GetX(ctx context.Context, id uuid.UUID) *Advertiser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdvertiserClient) Hooks() []Hook {
	return c.hooks.Advertiser
}

// Interceptors returns the client interceptors.
func (c *AdvertiserClient) Interceptors() []Interceptor {
	return c.inters.Advertiser
}

func (c *AdvertiserClient) mutate(ctx context.Context, m *AdvertiserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdvertiserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdvertiserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdvertiserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdvertiserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Advertiser mutation op: %q", m.Op())
	}
}

// CampaignClient is a client for the Campaign schema.
type CampaignClient struct {
	config
}

// NewCampaignClient returns a client for the Campaign from the given config.
func NewCampaignClient(c config) *CampaignClient {
	return &CampaignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `campaign.Hooks(f(g(h())))`.
func (c *CampaignClient) Use(hooks ...Hook) {
	c.hooks.Campaign = append(c.hooks.Campaign, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `campaign.Intercept(f(g(h())))`.
func (c *CampaignClient) Intercept(interceptors ...Interceptor) {
	c.inters.Campaign = append(c.inters.Campaign, interceptors...)
}

// Create returns a builder for creating a Campaign entity.
func (c *CampaignClient) Create() *CampaignCreate {
	mutation := newCampaignMutation(c.config, OpCreate)
	return &CampaignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Campaign entities.
func (c *CampaignClient) CreateBulk(builders ...*CampaignCreate) *CampaignCreateBulk {
	return &CampaignCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CampaignClient) MapCreateBulk(slice any, setFunc func(*CampaignCreate, int)) *CampaignCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CampaignCreateBulk{err: fmt.Errorf("calling to CampaignClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CampaignCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CampaignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Campaign.
func (c *CampaignClient) Update() *CampaignUpdate {
	mutation := newCampaignMutation(c.config, OpUpdate)
	return &CampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CampaignClient) UpdateOne(ca *Campaign) *CampaignUpdateOne {
	mutation := newCampaignMutation(c.config, OpUpdateOne, withCampaign(ca))
	return &CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CampaignClient) UpdateOneID(id uuid.UUID) *CampaignUpdateOne {
	mutation := newCampaignMutation(c.config, OpUpdateOne, withCampaignID(id))
	return &CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Campaign.
func (c *CampaignClient) Delete() *CampaignDelete {
	mutation := newCampaignMutation(c.config, OpDelete)
	return &CampaignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CampaignClient) DeleteOne(ca *Campaign) *CampaignDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CampaignClient) DeleteOneID(id uuid.UUID) *CampaignDeleteOne {
	builder := c.Delete().Where(campaign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CampaignDeleteOne{builder}
}

// Query returns a query builder for Campaign.
func (c *CampaignClient) Query() *CampaignQuery {
	return &CampaignQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCampaign},
		inters: c.Interceptors(),
	}
}

// Get returns a Campaign entity by its id.
func (c *CampaignClient) Get(ctx context.Context, id uuid.UUID) (*Campaign, error) {
	return c.Query().Where(campaign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CampaignClient) GetX(ctx context.Context, id uuid.UUID) *Campaign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargeting queries the targeting edge of a Campaign.
func (c *CampaignClient) QueryTargeting(ca *Campaign) *TargetingQuery {
	query := (&TargetingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(campaign.Table, campaign.FieldID, id),
			sqlgraph.To(targeting.Table, targeting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, campaign.TargetingTable, campaign.TargetingColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CampaignClient) Hooks() []Hook {
	return c.hooks.Campaign
}

// Interceptors returns the client interceptors.
func (c *CampaignClient) Interceptors() []Interceptor {
	return c.inters.Campaign
}

func (c *CampaignClient) mutate(ctx context.Context, m *CampaignMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CampaignCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CampaignDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Campaign mutation op: %q", m.Op())
	}
}

// MlScoreClient is a client for the MlScore schema.
type MlScoreClient struct {
	config
}

// NewMlScoreClient returns a client for the MlScore from the given config.
func NewMlScoreClient(c config) *MlScoreClient {
	return &MlScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mlscore.Hooks(f(g(h())))`.
func (c *MlScoreClient) Use(hooks ...Hook) {
	c.hooks.MlScore = append(c.hooks.MlScore, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mlscore.Intercept(f(g(h())))`.
func (c *MlScoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.MlScore = append(c.inters.MlScore, interceptors...)
}

// Create returns a builder for creating a MlScore entity.
func (c *MlScoreClient) Create() *MlScoreCreate {
	mutation := newMlScoreMutation(c.config, OpCreate)
	return &MlScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MlScore entities.
func (c *MlScoreClient) CreateBulk(builders ...*MlScoreCreate) *MlScoreCreateBulk {
	return &MlScoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MlScoreClient) MapCreateBulk(slice any, setFunc func(*MlScoreCreate, int)) *MlScoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MlScoreCreateBulk{err: fmt.Errorf("calling to MlScoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MlScoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MlScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MlScore.
func (c *MlScoreClient) Update() *MlScoreUpdate {
	mutation := newMlScoreMutation(c.config, OpUpdate)
	return &MlScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MlScoreClient) UpdateOne(ms *MlScore) *MlScoreUpdateOne {
	mutation := newMlScoreMutation(c.config, OpUpdateOne, withMlScore(ms))
	return &MlScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MlScoreClient) UpdateOneID(id int) *MlScoreUpdateOne {
	mutation := newMlScoreMutation(c.config, OpUpdateOne, withMlScoreID(id))
	return &MlScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MlScore.
func (c *MlScoreClient) Delete() *MlScoreDelete {
	mutation := newMlScoreMutation(c.config, OpDelete)
	return &MlScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MlScoreClient) DeleteOne(ms *MlScore) *MlScoreDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MlScoreClient) DeleteOneID(id int) *MlScoreDeleteOne {
	builder := c.Delete().Where(mlscore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MlScoreDeleteOne{builder}
}

// Query returns a query builder for MlScore.
func (c *MlScoreClient) Query() *MlScoreQuery {
	return &MlScoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMlScore},
		inters: c.Interceptors(),
	}
}

// Get returns a MlScore entity by its id.
func (c *MlScoreClient) Get(ctx context.Context, id int) (*MlScore, error) {
	return c.Query().Where(mlscore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MlScoreClient) GetX(ctx context.Context, id int) *MlScore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a MlScore.
func (c *MlScoreClient) QueryUser(ms *MlScore) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mlscore.Table, mlscore.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mlscore.UserTable, mlscore.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdvertiser queries the advertiser edge of a MlScore.
func (c *MlScoreClient) QueryAdvertiser(ms *MlScore) *AdvertiserQuery {
	query := (&AdvertiserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mlscore.Table, mlscore.FieldID, id),
			sqlgraph.To(advertiser.Table, advertiser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mlscore.AdvertiserTable, mlscore.AdvertiserColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MlScoreClient) Hooks() []Hook {
	return c.hooks.MlScore
}

// Interceptors returns the client interceptors.
func (c *MlScoreClient) Interceptors() []Interceptor {
	return c.inters.MlScore
}

func (c *MlScoreClient) mutate(ctx context.Context, m *MlScoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MlScoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MlScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MlScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MlScoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MlScore mutation op: %q", m.Op())
	}
}

// TargetingClient is a client for the Targeting schema.
type TargetingClient struct {
	config
}

// NewTargetingClient returns a client for the Targeting from the given config.
func NewTargetingClient(c config) *TargetingClient {
	return &TargetingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `targeting.Hooks(f(g(h())))`.
func (c *TargetingClient) Use(hooks ...Hook) {
	c.hooks.Targeting = append(c.hooks.Targeting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `targeting.Intercept(f(g(h())))`.
func (c *TargetingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Targeting = append(c.inters.Targeting, interceptors...)
}

// Create returns a builder for creating a Targeting entity.
func (c *TargetingClient) Create() *TargetingCreate {
	mutation := newTargetingMutation(c.config, OpCreate)
	return &TargetingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Targeting entities.
func (c *TargetingClient) CreateBulk(builders ...*TargetingCreate) *TargetingCreateBulk {
	return &TargetingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TargetingClient) MapCreateBulk(slice any, setFunc func(*TargetingCreate, int)) *TargetingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TargetingCreateBulk{err: fmt.Errorf("calling to TargetingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TargetingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TargetingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Targeting.
func (c *TargetingClient) Update() *TargetingUpdate {
	mutation := newTargetingMutation(c.config, OpUpdate)
	return &TargetingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TargetingClient) UpdateOne(t *Targeting) *TargetingUpdateOne {
	mutation := newTargetingMutation(c.config, OpUpdateOne, withTargeting(t))
	return &TargetingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TargetingClient) UpdateOneID(id int) *TargetingUpdateOne {
	mutation := newTargetingMutation(c.config, OpUpdateOne, withTargetingID(id))
	return &TargetingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Targeting.
func (c *TargetingClient) Delete() *TargetingDelete {
	mutation := newTargetingMutation(c.config, OpDelete)
	return &TargetingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TargetingClient) DeleteOne(t *Targeting) *TargetingDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TargetingClient) DeleteOneID(id int) *TargetingDeleteOne {
	builder := c.Delete().Where(targeting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TargetingDeleteOne{builder}
}

// Query returns a query builder for Targeting.
func (c *TargetingClient) Query() *TargetingQuery {
	return &TargetingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTargeting},
		inters: c.Interceptors(),
	}
}

// Get returns a Targeting entity by its id.
func (c *TargetingClient) Get(ctx context.Context, id int) (*Targeting, error) {
	return c.Query().Where(targeting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TargetingClient) GetX(ctx context.Context, id int) *Targeting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCampaign queries the campaign edge of a Targeting.
func (c *TargetingClient) QueryCampaign(t *Targeting) *CampaignQuery {
	query := (&CampaignClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(targeting.Table, targeting.FieldID, id),
			sqlgraph.To(campaign.Table, campaign.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, targeting.CampaignTable, targeting.CampaignColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TargetingClient) Hooks() []Hook {
	return c.hooks.Targeting
}

// Interceptors returns the client interceptors.
func (c *TargetingClient) Interceptors() []Interceptor {
	return c.inters.Targeting
}

func (c *TargetingClient) mutate(ctx context.Context, m *TargetingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TargetingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TargetingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TargetingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TargetingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Targeting mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Advertiser, Campaign, MlScore, Targeting, User []ent.Hook
	}
	inters struct {
		Advertiser, Campaign, MlScore, Targeting, User []ent.Interceptor
	}
)

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/advertiser"
	"nlypage-final/internal/adapters/database/postgres/ent/mlscore"
	"nlypage-final/internal/adapters/database/postgres/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MlScore is the model entity for the MlScore schema.
type MlScore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AdvertiserID holds the value of the "advertiser_id" field.
	AdvertiserID uuid.UUID `json:"advertiser_id,omitempty"`
	// Score holds the value of the "score" field.
	Score int64 `json:"score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MlScoreQuery when eager-loading is set.
	Edges        MlScoreEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MlScoreEdges holds the relations/edges for other nodes in the graph.
type MlScoreEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Advertiser holds the value of the advertiser edge.
	Advertiser *Advertiser `json:"advertiser,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MlScoreEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AdvertiserOrErr returns the Advertiser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MlScoreEdges) AdvertiserOrErr() (*Advertiser, error) {
	if e.Advertiser != nil {
		return e.Advertiser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: advertiser.Label}
	}
	return nil, &NotLoadedError{edge: "advertiser"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MlScore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mlscore.FieldID, mlscore.FieldScore:
			values[i] = new(sql.NullInt64)
		case mlscore.FieldUserID, mlscore.FieldAdvertiserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MlScore fields.
func (ms *MlScore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mlscore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case mlscore.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ms.UserID = *value
			}
		case mlscore.FieldAdvertiserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field advertiser_id", values[i])
			} else if value != nil {
				ms.AdvertiserID = *value
			}
		case mlscore.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				ms.Score = value.Int64
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MlScore.
// This includes values selected through modifiers, order, etc.
func (ms *MlScore) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the MlScore entity.
func (ms *MlScore) QueryUser() *UserQuery {
	return NewMlScoreClient(ms.config).QueryUser(ms)
}

// QueryAdvertiser queries the "advertiser" edge of the MlScore entity.
func (ms *MlScore) QueryAdvertiser() *AdvertiserQuery {
	return NewMlScoreClient(ms.config).QueryAdvertiser(ms)
}

// Update returns a builder for updating this MlScore.
// Note that you need to call MlScore.Unwrap() before calling this method if this MlScore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MlScore) Update() *MlScoreUpdateOne {
	return NewMlScoreClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MlScore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MlScore) Unwrap() *MlScore {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MlScore is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MlScore) String() string {
	var builder strings.Builder
	builder.WriteString("MlScore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.UserID))
	builder.WriteString(", ")
	builder.WriteString("advertiser_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.AdvertiserID))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", ms.Score))
	builder.WriteByte(')')
	return builder.String()
}

// MlScores is a parsable slice of MlScore.
type MlScores []*MlScore

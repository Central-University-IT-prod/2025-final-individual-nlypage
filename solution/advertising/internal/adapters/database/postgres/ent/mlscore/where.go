// Code generated by ent, DO NOT EDIT.

package mlscore

import (
	"nlypage-final/internal/adapters/database/postgres/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MlScore {
	return predicate.MlScore(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MlScore {
	return predicate.MlScore(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MlScore {
	return predicate.MlScore(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MlScore {
	return predicate.MlScore(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MlScore {
	return predicate.MlScore(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MlScore {
	return predicate.MlScore(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MlScore {
	return predicate.MlScore(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldUserID, v))
}

// AdvertiserID applies equality check predicate on the "advertiser_id" field. It's identical to AdvertiserIDEQ.
func AdvertiserID(v uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldAdvertiserID, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldScore, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldNotIn(FieldUserID, vs...))
}

// AdvertiserIDEQ applies the EQ predicate on the "advertiser_id" field.
func AdvertiserIDEQ(v uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldAdvertiserID, v))
}

// AdvertiserIDNEQ applies the NEQ predicate on the "advertiser_id" field.
func AdvertiserIDNEQ(v uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldNEQ(FieldAdvertiserID, v))
}

// AdvertiserIDIn applies the In predicate on the "advertiser_id" field.
func AdvertiserIDIn(vs ...uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldIn(FieldAdvertiserID, vs...))
}

// AdvertiserIDNotIn applies the NotIn predicate on the "advertiser_id" field.
func AdvertiserIDNotIn(vs ...uuid.UUID) predicate.MlScore {
	return predicate.MlScore(sql.FieldNotIn(FieldAdvertiserID, vs...))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int64) predicate.MlScore {
	return predicate.MlScore(sql.FieldLTE(FieldScore, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.MlScore {
	return predicate.MlScore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.MlScore {
	return predicate.MlScore(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdvertiser applies the HasEdge predicate on the "advertiser" edge.
func HasAdvertiser() predicate.MlScore {
	return predicate.MlScore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AdvertiserTable, AdvertiserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdvertiserWith applies the HasEdge predicate on the "advertiser" edge with a given conditions (other predicates).
func HasAdvertiserWith(preds ...predicate.Advertiser) predicate.MlScore {
	return predicate.MlScore(func(s *sql.Selector) {
		step := newAdvertiserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MlScore) predicate.MlScore {
	return predicate.MlScore(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MlScore) predicate.MlScore {
	return predicate.MlScore(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MlScore) predicate.MlScore {
	return predicate.MlScore(sql.NotPredicates(p))
}

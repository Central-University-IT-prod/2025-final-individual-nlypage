// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/advertiser"
	"nlypage-final/internal/adapters/database/postgres/ent/mlscore"
	"nlypage-final/internal/adapters/database/postgres/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MlScoreCreate is the builder for creating a MlScore entity.
type MlScoreCreate struct {
	config
	mutation *MlScoreMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (msc *MlScoreCreate) SetUserID(u uuid.UUID) *MlScoreCreate {
	msc.mutation.SetUserID(u)
	return msc
}

// SetAdvertiserID sets the "advertiser_id" field.
func (msc *MlScoreCreate) SetAdvertiserID(u uuid.UUID) *MlScoreCreate {
	msc.mutation.SetAdvertiserID(u)
	return msc
}

// SetScore sets the "score" field.
func (msc *MlScoreCreate) SetScore(i int64) *MlScoreCreate {
	msc.mutation.SetScore(i)
	return msc
}

// SetUser sets the "user" edge to the User entity.
func (msc *MlScoreCreate) SetUser(u *User) *MlScoreCreate {
	return msc.SetUserID(u.ID)
}

// SetAdvertiser sets the "advertiser" edge to the Advertiser entity.
func (msc *MlScoreCreate) SetAdvertiser(a *Advertiser) *MlScoreCreate {
	return msc.SetAdvertiserID(a.ID)
}

// Mutation returns the MlScoreMutation object of the builder.
func (msc *MlScoreCreate) Mutation() *MlScoreMutation {
	return msc.mutation
}

// Save creates the MlScore in the database.
func (msc *MlScoreCreate) Save(ctx context.Context) (*MlScore, error) {
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MlScoreCreate) SaveX(ctx context.Context) *MlScore {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MlScoreCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MlScoreCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MlScoreCreate) check() error {
	if _, ok := msc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "MlScore.user_id"`)}
	}
	if _, ok := msc.mutation.AdvertiserID(); !ok {
		return &ValidationError{Name: "advertiser_id", err: errors.New(`ent: missing required field "MlScore.advertiser_id"`)}
	}
	if _, ok := msc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "MlScore.score"`)}
	}
	if len(msc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "MlScore.user"`)}
	}
	if len(msc.mutation.AdvertiserIDs()) == 0 {
		return &ValidationError{Name: "advertiser", err: errors.New(`ent: missing required edge "MlScore.advertiser"`)}
	}
	return nil
}

func (msc *MlScoreCreate) sqlSave(ctx context.Context) (*MlScore, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MlScoreCreate) createSpec() (*MlScore, *sqlgraph.CreateSpec) {
	var (
		_node = &MlScore{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(mlscore.Table, sqlgraph.NewFieldSpec(mlscore.FieldID, field.TypeInt))
	)
	_spec.OnConflict = msc.conflict
	if value, ok := msc.mutation.Score(); ok {
		_spec.SetField(mlscore.FieldScore, field.TypeInt64, value)
		_node.Score = value
	}
	if nodes := msc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mlscore.UserTable,
			Columns: []string{mlscore.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := msc.mutation.AdvertiserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mlscore.AdvertiserTable,
			Columns: []string{mlscore.AdvertiserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(advertiser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AdvertiserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MlScore.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MlScoreUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (msc *MlScoreCreate) OnConflict(opts ...sql.ConflictOption) *MlScoreUpsertOne {
	msc.conflict = opts
	return &MlScoreUpsertOne{
		create: msc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MlScore.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (msc *MlScoreCreate) OnConflictColumns(columns ...string) *MlScoreUpsertOne {
	msc.conflict = append(msc.conflict, sql.ConflictColumns(columns...))
	return &MlScoreUpsertOne{
		create: msc,
	}
}

type (
	// MlScoreUpsertOne is the builder for "upsert"-ing
	//  one MlScore node.
	MlScoreUpsertOne struct {
		create *MlScoreCreate
	}

	// MlScoreUpsert is the "OnConflict" setter.
	MlScoreUpsert struct {
		*sql.UpdateSet
	}
)

// SetScore sets the "score" field.
func (u *MlScoreUpsert) SetScore(v int64) *MlScoreUpsert {
	u.Set(mlscore.FieldScore, v)
	return u
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *MlScoreUpsert) UpdateScore() *MlScoreUpsert {
	u.SetExcluded(mlscore.FieldScore)
	return u
}

// AddScore adds v to the "score" field.
func (u *MlScoreUpsert) AddScore(v int64) *MlScoreUpsert {
	u.Add(mlscore.FieldScore, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.MlScore.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MlScoreUpsertOne) UpdateNewValues() *MlScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(mlscore.FieldUserID)
		}
		if _, exists := u.create.mutation.AdvertiserID(); exists {
			s.SetIgnore(mlscore.FieldAdvertiserID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MlScore.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MlScoreUpsertOne) Ignore() *MlScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MlScoreUpsertOne) DoNothing() *MlScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MlScoreCreate.OnConflict
// documentation for more info.
func (u *MlScoreUpsertOne) Update(set func(*MlScoreUpsert)) *MlScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MlScoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetScore sets the "score" field.
func (u *MlScoreUpsertOne) SetScore(v int64) *MlScoreUpsertOne {
	return u.Update(func(s *MlScoreUpsert) {
		s.SetScore(v)
	})
}

// AddScore adds v to the "score" field.
func (u *MlScoreUpsertOne) AddScore(v int64) *MlScoreUpsertOne {
	return u.Update(func(s *MlScoreUpsert) {
		s.AddScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *MlScoreUpsertOne) UpdateScore() *MlScoreUpsertOne {
	return u.Update(func(s *MlScoreUpsert) {
		s.UpdateScore()
	})
}

// Exec executes the query.
func (u *MlScoreUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MlScoreCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MlScoreUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MlScoreUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MlScoreUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MlScoreCreateBulk is the builder for creating many MlScore entities in bulk.
type MlScoreCreateBulk struct {
	config
	err      error
	builders []*MlScoreCreate
	conflict []sql.ConflictOption
}

// Save creates the MlScore entities in the database.
func (mscb *MlScoreCreateBulk) Save(ctx context.Context) ([]*MlScore, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MlScore, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MlScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MlScoreCreateBulk) SaveX(ctx context.Context) []*MlScore {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MlScoreCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MlScoreCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MlScore.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MlScoreUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (mscb *MlScoreCreateBulk) OnConflict(opts ...sql.ConflictOption) *MlScoreUpsertBulk {
	mscb.conflict = opts
	return &MlScoreUpsertBulk{
		create: mscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MlScore.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mscb *MlScoreCreateBulk) OnConflictColumns(columns ...string) *MlScoreUpsertBulk {
	mscb.conflict = append(mscb.conflict, sql.ConflictColumns(columns...))
	return &MlScoreUpsertBulk{
		create: mscb,
	}
}

// MlScoreUpsertBulk is the builder for "upsert"-ing
// a bulk of MlScore nodes.
type MlScoreUpsertBulk struct {
	create *MlScoreCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MlScore.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MlScoreUpsertBulk) UpdateNewValues() *MlScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(mlscore.FieldUserID)
			}
			if _, exists := b.mutation.AdvertiserID(); exists {
				s.SetIgnore(mlscore.FieldAdvertiserID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MlScore.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MlScoreUpsertBulk) Ignore() *MlScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MlScoreUpsertBulk) DoNothing() *MlScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MlScoreCreateBulk.OnConflict
// documentation for more info.
func (u *MlScoreUpsertBulk) Update(set func(*MlScoreUpsert)) *MlScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MlScoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetScore sets the "score" field.
func (u *MlScoreUpsertBulk) SetScore(v int64) *MlScoreUpsertBulk {
	return u.Update(func(s *MlScoreUpsert) {
		s.SetScore(v)
	})
}

// AddScore adds v to the "score" field.
func (u *MlScoreUpsertBulk) AddScore(v int64) *MlScoreUpsertBulk {
	return u.Update(func(s *MlScoreUpsert) {
		s.AddScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *MlScoreUpsertBulk) UpdateScore() *MlScoreUpsertBulk {
	return u.Update(func(s *MlScoreUpsert) {
		s.UpdateScore()
	})
}

// Exec executes the query.
func (u *MlScoreUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MlScoreCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MlScoreCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MlScoreUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

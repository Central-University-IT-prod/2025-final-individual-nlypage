// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"nlypage-final/internal/adapters/database/postgres/ent/mlscore"
	"nlypage-final/internal/adapters/database/postgres/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MlScoreDelete is the builder for deleting a MlScore entity.
type MlScoreDelete struct {
	config
	hooks    []Hook
	mutation *MlScoreMutation
}

// Where appends a list predicates to the MlScoreDelete builder.
func (msd *MlScoreDelete) Where(ps ...predicate.MlScore) *MlScoreDelete {
	msd.mutation.Where(ps...)
	return msd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (msd *MlScoreDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, msd.sqlExec, msd.mutation, msd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (msd *MlScoreDelete) ExecX(ctx context.Context) int {
	n, err := msd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (msd *MlScoreDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(mlscore.Table, sqlgraph.NewFieldSpec(mlscore.FieldID, field.TypeInt))
	if ps := msd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, msd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	msd.mutation.done = true
	return affected, err
}

// MlScoreDeleteOne is the builder for deleting a single MlScore entity.
type MlScoreDeleteOne struct {
	msd *MlScoreDelete
}

// Where appends a list predicates to the MlScoreDelete builder.
func (msdo *MlScoreDeleteOne) Where(ps ...predicate.MlScore) *MlScoreDeleteOne {
	msdo.msd.mutation.Where(ps...)
	return msdo
}

// Exec executes the deletion query.
func (msdo *MlScoreDeleteOne) Exec(ctx context.Context) error {
	n, err := msdo.msd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mlscore.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (msdo *MlScoreDeleteOne) ExecX(ctx context.Context) {
	if err := msdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/mlscore"
	"nlypage-final/internal/adapters/database/postgres/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MlScoreUpdate is the builder for updating MlScore entities.
type MlScoreUpdate struct {
	config
	hooks    []Hook
	mutation *MlScoreMutation
}

// Where appends a list predicates to the MlScoreUpdate builder.
func (msu *MlScoreUpdate) Where(ps ...predicate.MlScore) *MlScoreUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetScore sets the "score" field.
func (msu *MlScoreUpdate) SetScore(i int64) *MlScoreUpdate {
	msu.mutation.ResetScore()
	msu.mutation.SetScore(i)
	return msu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (msu *MlScoreUpdate) SetNillableScore(i *int64) *MlScoreUpdate {
	if i != nil {
		msu.SetScore(*i)
	}
	return msu
}

// AddScore adds i to the "score" field.
func (msu *MlScoreUpdate) AddScore(i int64) *MlScoreUpdate {
	msu.mutation.AddScore(i)
	return msu
}

// Mutation returns the MlScoreMutation object of the builder.
func (msu *MlScoreUpdate) Mutation() *MlScoreMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MlScoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MlScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MlScoreUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MlScoreUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MlScoreUpdate) check() error {
	if msu.mutation.UserCleared() && len(msu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MlScore.user"`)
	}
	if msu.mutation.AdvertiserCleared() && len(msu.mutation.AdvertiserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MlScore.advertiser"`)
	}
	return nil
}

func (msu *MlScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := msu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mlscore.Table, mlscore.Columns, sqlgraph.NewFieldSpec(mlscore.FieldID, field.TypeInt))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.Score(); ok {
		_spec.SetField(mlscore.FieldScore, field.TypeInt64, value)
	}
	if value, ok := msu.mutation.AddedScore(); ok {
		_spec.AddField(mlscore.FieldScore, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mlscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MlScoreUpdateOne is the builder for updating a single MlScore entity.
type MlScoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MlScoreMutation
}

// SetScore sets the "score" field.
func (msuo *MlScoreUpdateOne) SetScore(i int64) *MlScoreUpdateOne {
	msuo.mutation.ResetScore()
	msuo.mutation.SetScore(i)
	return msuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (msuo *MlScoreUpdateOne) SetNillableScore(i *int64) *MlScoreUpdateOne {
	if i != nil {
		msuo.SetScore(*i)
	}
	return msuo
}

// AddScore adds i to the "score" field.
func (msuo *MlScoreUpdateOne) AddScore(i int64) *MlScoreUpdateOne {
	msuo.mutation.AddScore(i)
	return msuo
}

// Mutation returns the MlScoreMutation object of the builder.
func (msuo *MlScoreUpdateOne) Mutation() *MlScoreMutation {
	return msuo.mutation
}

// Where appends a list predicates to the MlScoreUpdate builder.
func (msuo *MlScoreUpdateOne) Where(ps ...predicate.MlScore) *MlScoreUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MlScoreUpdateOne) Select(field string, fields ...string) *MlScoreUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MlScore entity.
func (msuo *MlScoreUpdateOne) Save(ctx context.Context) (*MlScore, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MlScoreUpdateOne) SaveX(ctx context.Context) *MlScore {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MlScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MlScoreUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MlScoreUpdateOne) check() error {
	if msuo.mutation.UserCleared() && len(msuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MlScore.user"`)
	}
	if msuo.mutation.AdvertiserCleared() && len(msuo.mutation.AdvertiserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MlScore.advertiser"`)
	}
	return nil
}

func (msuo *MlScoreUpdateOne) sqlSave(ctx context.Context) (_node *MlScore, err error) {
	if err := msuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mlscore.Table, mlscore.Columns, sqlgraph.NewFieldSpec(mlscore.FieldID, field.TypeInt))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MlScore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mlscore.FieldID)
		for _, f := range fields {
			if !mlscore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mlscore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.Score(); ok {
		_spec.SetField(mlscore.FieldScore, field.TypeInt64, value)
	}
	if value, ok := msuo.mutation.AddedScore(); ok {
		_spec.AddField(mlscore.FieldScore, field.TypeInt64, value)
	}
	_node = &MlScore{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mlscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/advertiser"
	"nlypage-final/internal/adapters/database/postgres/ent/campaign"
	"nlypage-final/internal/adapters/database/postgres/ent/mlscore"
	"nlypage-final/internal/adapters/database/postgres/ent/predicate"
	"nlypage-final/internal/adapters/database/postgres/ent/targeting"
	"nlypage-final/internal/adapters/database/postgres/ent/user"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdvertiser = "Advertiser"
	TypeCampaign   = "Campaign"
	TypeMlScore    = "MlScore"
	TypeTargeting  = "Targeting"
	TypeUser       = "User"
)

// AdvertiserMutation represents an operation that mutates the Advertiser nodes in the graph.
type AdvertiserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Advertiser, error)
	predicates    []predicate.Advertiser
}

var _ ent.Mutation = (*AdvertiserMutation)(nil)

// advertiserOption allows management of the mutation configuration using functional options.
type advertiserOption func(*AdvertiserMutation)

// newAdvertiserMutation creates new mutation for the Advertiser entity.
func newAdvertiserMutation(c config, op Op, opts ...advertiserOption) *AdvertiserMutation {
	m := &AdvertiserMutation{
		config:        c,
		op:            op,
		typ:           TypeAdvertiser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdvertiserID sets the ID field of the mutation.
func withAdvertiserID(id uuid.UUID) advertiserOption {
	return func(m *AdvertiserMutation) {
		var (
			err   error
			once  sync.Once
			value *Advertiser
		)
		m.oldValue = func(ctx context.Context) (*Advertiser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Advertiser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdvertiser sets the old Advertiser of the mutation.
func withAdvertiser(node *Advertiser) advertiserOption {
	return func(m *AdvertiserMutation) {
		m.oldValue = func(context.Context) (*Advertiser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdvertiserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdvertiserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Advertiser entities.
func (m *AdvertiserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdvertiserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdvertiserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Advertiser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AdvertiserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdvertiserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Advertiser entity.
// If the Advertiser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvertiserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdvertiserMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the AdvertiserMutation builder.
func (m *AdvertiserMutation) Where(ps ...predicate.Advertiser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdvertiserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdvertiserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Advertiser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdvertiserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdvertiserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Advertiser).
func (m *AdvertiserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdvertiserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, advertiser.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdvertiserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case advertiser.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdvertiserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case advertiser.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Advertiser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdvertiserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case advertiser.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Advertiser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdvertiserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdvertiserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdvertiserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Advertiser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdvertiserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdvertiserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdvertiserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Advertiser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdvertiserMutation) ResetField(name string) error {
	switch name {
	case advertiser.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Advertiser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdvertiserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdvertiserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdvertiserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdvertiserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdvertiserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdvertiserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdvertiserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Advertiser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdvertiserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Advertiser edge %s", name)
}

// CampaignMutation represents an operation that mutates the Campaign nodes in the graph.
type CampaignMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	advertiser_id          *uuid.UUID
	impressions_limit      *int
	addimpressions_limit   *int
	clicks_limit           *int
	addclicks_limit        *int
	cost_per_impression    *float64
	addcost_per_impression *float64
	cost_per_click         *float64
	addcost_per_click      *float64
	ad_title               *string
	ad_text                *string
	image_url              *string
	start_date             *int
	addstart_date          *int
	end_date               *int
	addend_date            *int
	moderated              *bool
	clearedFields          map[string]struct{}
	targeting              *int
	clearedtargeting       bool
	done                   bool
	oldValue               func(context.Context) (*Campaign, error)
	predicates             []predicate.Campaign
}

var _ ent.Mutation = (*CampaignMutation)(nil)

// campaignOption allows management of the mutation configuration using functional options.
type campaignOption func(*CampaignMutation)

// newCampaignMutation creates new mutation for the Campaign entity.
func newCampaignMutation(c config, op Op, opts ...campaignOption) *CampaignMutation {
	m := &CampaignMutation{
		config:        c,
		op:            op,
		typ:           TypeCampaign,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCampaignID sets the ID field of the mutation.
func withCampaignID(id uuid.UUID) campaignOption {
	return func(m *CampaignMutation) {
		var (
			err   error
			once  sync.Once
			value *Campaign
		)
		m.oldValue = func(ctx context.Context) (*Campaign, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Campaign.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCampaign sets the old Campaign of the mutation.
func withCampaign(node *Campaign) campaignOption {
	return func(m *CampaignMutation) {
		m.oldValue = func(context.Context) (*Campaign, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CampaignMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CampaignMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Campaign entities.
func (m *CampaignMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CampaignMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CampaignMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Campaign.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAdvertiserID sets the "advertiser_id" field.
func (m *CampaignMutation) SetAdvertiserID(u uuid.UUID) {
	m.advertiser_id = &u
}

// AdvertiserID returns the value of the "advertiser_id" field in the mutation.
func (m *CampaignMutation) AdvertiserID() (r uuid.UUID, exists bool) {
	v := m.advertiser_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAdvertiserID returns the old "advertiser_id" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldAdvertiserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdvertiserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdvertiserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdvertiserID: %w", err)
	}
	return oldValue.AdvertiserID, nil
}

// ResetAdvertiserID resets all changes to the "advertiser_id" field.
func (m *CampaignMutation) ResetAdvertiserID() {
	m.advertiser_id = nil
}

// SetImpressionsLimit sets the "impressions_limit" field.
func (m *CampaignMutation) SetImpressionsLimit(i int) {
	m.impressions_limit = &i
	m.addimpressions_limit = nil
}

// ImpressionsLimit returns the value of the "impressions_limit" field in the mutation.
func (m *CampaignMutation) ImpressionsLimit() (r int, exists bool) {
	v := m.impressions_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldImpressionsLimit returns the old "impressions_limit" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldImpressionsLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImpressionsLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImpressionsLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImpressionsLimit: %w", err)
	}
	return oldValue.ImpressionsLimit, nil
}

// AddImpressionsLimit adds i to the "impressions_limit" field.
func (m *CampaignMutation) AddImpressionsLimit(i int) {
	if m.addimpressions_limit != nil {
		*m.addimpressions_limit += i
	} else {
		m.addimpressions_limit = &i
	}
}

// AddedImpressionsLimit returns the value that was added to the "impressions_limit" field in this mutation.
func (m *CampaignMutation) AddedImpressionsLimit() (r int, exists bool) {
	v := m.addimpressions_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetImpressionsLimit resets all changes to the "impressions_limit" field.
func (m *CampaignMutation) ResetImpressionsLimit() {
	m.impressions_limit = nil
	m.addimpressions_limit = nil
}

// SetClicksLimit sets the "clicks_limit" field.
func (m *CampaignMutation) SetClicksLimit(i int) {
	m.clicks_limit = &i
	m.addclicks_limit = nil
}

// ClicksLimit returns the value of the "clicks_limit" field in the mutation.
func (m *CampaignMutation) ClicksLimit() (r int, exists bool) {
	v := m.clicks_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldClicksLimit returns the old "clicks_limit" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldClicksLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClicksLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClicksLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClicksLimit: %w", err)
	}
	return oldValue.ClicksLimit, nil
}

// AddClicksLimit adds i to the "clicks_limit" field.
func (m *CampaignMutation) AddClicksLimit(i int) {
	if m.addclicks_limit != nil {
		*m.addclicks_limit += i
	} else {
		m.addclicks_limit = &i
	}
}

// AddedClicksLimit returns the value that was added to the "clicks_limit" field in this mutation.
func (m *CampaignMutation) AddedClicksLimit() (r int, exists bool) {
	v := m.addclicks_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetClicksLimit resets all changes to the "clicks_limit" field.
func (m *CampaignMutation) ResetClicksLimit() {
	m.clicks_limit = nil
	m.addclicks_limit = nil
}

// SetCostPerImpression sets the "cost_per_impression" field.
func (m *CampaignMutation) SetCostPerImpression(f float64) {
	m.cost_per_impression = &f
	m.addcost_per_impression = nil
}

// CostPerImpression returns the value of the "cost_per_impression" field in the mutation.
func (m *CampaignMutation) CostPerImpression() (r float64, exists bool) {
	v := m.cost_per_impression
	if v == nil {
		return
	}
	return *v, true
}

// OldCostPerImpression returns the old "cost_per_impression" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldCostPerImpression(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCostPerImpression is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCostPerImpression requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCostPerImpression: %w", err)
	}
	return oldValue.CostPerImpression, nil
}

// AddCostPerImpression adds f to the "cost_per_impression" field.
func (m *CampaignMutation) AddCostPerImpression(f float64) {
	if m.addcost_per_impression != nil {
		*m.addcost_per_impression += f
	} else {
		m.addcost_per_impression = &f
	}
}

// AddedCostPerImpression returns the value that was added to the "cost_per_impression" field in this mutation.
func (m *CampaignMutation) AddedCostPerImpression() (r float64, exists bool) {
	v := m.addcost_per_impression
	if v == nil {
		return
	}
	return *v, true
}

// ResetCostPerImpression resets all changes to the "cost_per_impression" field.
func (m *CampaignMutation) ResetCostPerImpression() {
	m.cost_per_impression = nil
	m.addcost_per_impression = nil
}

// SetCostPerClick sets the "cost_per_click" field.
func (m *CampaignMutation) SetCostPerClick(f float64) {
	m.cost_per_click = &f
	m.addcost_per_click = nil
}

// CostPerClick returns the value of the "cost_per_click" field in the mutation.
func (m *CampaignMutation) CostPerClick() (r float64, exists bool) {
	v := m.cost_per_click
	if v == nil {
		return
	}
	return *v, true
}

// OldCostPerClick returns the old "cost_per_click" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldCostPerClick(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCostPerClick is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCostPerClick requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCostPerClick: %w", err)
	}
	return oldValue.CostPerClick, nil
}

// AddCostPerClick adds f to the "cost_per_click" field.
func (m *CampaignMutation) AddCostPerClick(f float64) {
	if m.addcost_per_click != nil {
		*m.addcost_per_click += f
	} else {
		m.addcost_per_click = &f
	}
}

// AddedCostPerClick returns the value that was added to the "cost_per_click" field in this mutation.
func (m *CampaignMutation) AddedCostPerClick() (r float64, exists bool) {
	v := m.addcost_per_click
	if v == nil {
		return
	}
	return *v, true
}

// ResetCostPerClick resets all changes to the "cost_per_click" field.
func (m *CampaignMutation) ResetCostPerClick() {
	m.cost_per_click = nil
	m.addcost_per_click = nil
}

// SetAdTitle sets the "ad_title" field.
func (m *CampaignMutation) SetAdTitle(s string) {
	m.ad_title = &s
}

// AdTitle returns the value of the "ad_title" field in the mutation.
func (m *CampaignMutation) AdTitle() (r string, exists bool) {
	v := m.ad_title
	if v == nil {
		return
	}
	return *v, true
}

// OldAdTitle returns the old "ad_title" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldAdTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdTitle: %w", err)
	}
	return oldValue.AdTitle, nil
}

// ResetAdTitle resets all changes to the "ad_title" field.
func (m *CampaignMutation) ResetAdTitle() {
	m.ad_title = nil
}

// SetAdText sets the "ad_text" field.
func (m *CampaignMutation) SetAdText(s string) {
	m.ad_text = &s
}

// AdText returns the value of the "ad_text" field in the mutation.
func (m *CampaignMutation) AdText() (r string, exists bool) {
	v := m.ad_text
	if v == nil {
		return
	}
	return *v, true
}

// OldAdText returns the old "ad_text" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldAdText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdText: %w", err)
	}
	return oldValue.AdText, nil
}

// ResetAdText resets all changes to the "ad_text" field.
func (m *CampaignMutation) ResetAdText() {
	m.ad_text = nil
}

// SetImageURL sets the "image_url" field.
func (m *CampaignMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *CampaignMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *CampaignMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[campaign.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *CampaignMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[campaign.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *CampaignMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, campaign.FieldImageURL)
}

// SetStartDate sets the "start_date" field.
func (m *CampaignMutation) SetStartDate(i int) {
	m.start_date = &i
	m.addstart_date = nil
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *CampaignMutation) StartDate() (r int, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldStartDate(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// AddStartDate adds i to the "start_date" field.
func (m *CampaignMutation) AddStartDate(i int) {
	if m.addstart_date != nil {
		*m.addstart_date += i
	} else {
		m.addstart_date = &i
	}
}

// AddedStartDate returns the value that was added to the "start_date" field in this mutation.
func (m *CampaignMutation) AddedStartDate() (r int, exists bool) {
	v := m.addstart_date
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *CampaignMutation) ResetStartDate() {
	m.start_date = nil
	m.addstart_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *CampaignMutation) SetEndDate(i int) {
	m.end_date = &i
	m.addend_date = nil
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *CampaignMutation) EndDate() (r int, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldEndDate(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// AddEndDate adds i to the "end_date" field.
func (m *CampaignMutation) AddEndDate(i int) {
	if m.addend_date != nil {
		*m.addend_date += i
	} else {
		m.addend_date = &i
	}
}

// AddedEndDate returns the value that was added to the "end_date" field in this mutation.
func (m *CampaignMutation) AddedEndDate() (r int, exists bool) {
	v := m.addend_date
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *CampaignMutation) ResetEndDate() {
	m.end_date = nil
	m.addend_date = nil
}

// SetModerated sets the "moderated" field.
func (m *CampaignMutation) SetModerated(b bool) {
	m.moderated = &b
}

// Moderated returns the value of the "moderated" field in the mutation.
func (m *CampaignMutation) Moderated() (r bool, exists bool) {
	v := m.moderated
	if v == nil {
		return
	}
	return *v, true
}

// OldModerated returns the old "moderated" field's value of the Campaign entity.
// If the Campaign object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CampaignMutation) OldModerated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModerated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModerated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModerated: %w", err)
	}
	return oldValue.Moderated, nil
}

// ResetModerated resets all changes to the "moderated" field.
func (m *CampaignMutation) ResetModerated() {
	m.moderated = nil
}

// SetTargetingID sets the "targeting" edge to the Targeting entity by id.
func (m *CampaignMutation) SetTargetingID(id int) {
	m.targeting = &id
}

// ClearTargeting clears the "targeting" edge to the Targeting entity.
func (m *CampaignMutation) ClearTargeting() {
	m.clearedtargeting = true
}

// TargetingCleared reports if the "targeting" edge to the Targeting entity was cleared.
func (m *CampaignMutation) TargetingCleared() bool {
	return m.clearedtargeting
}

// TargetingID returns the "targeting" edge ID in the mutation.
func (m *CampaignMutation) TargetingID() (id int, exists bool) {
	if m.targeting != nil {
		return *m.targeting, true
	}
	return
}

// TargetingIDs returns the "targeting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetingID instead. It exists only for internal usage by the builders.
func (m *CampaignMutation) TargetingIDs() (ids []int) {
	if id := m.targeting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargeting resets all changes to the "targeting" edge.
func (m *CampaignMutation) ResetTargeting() {
	m.targeting = nil
	m.clearedtargeting = false
}

// Where appends a list predicates to the CampaignMutation builder.
func (m *CampaignMutation) Where(ps ...predicate.Campaign) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CampaignMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CampaignMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Campaign, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CampaignMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CampaignMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Campaign).
func (m *CampaignMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CampaignMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.advertiser_id != nil {
		fields = append(fields, campaign.FieldAdvertiserID)
	}
	if m.impressions_limit != nil {
		fields = append(fields, campaign.FieldImpressionsLimit)
	}
	if m.clicks_limit != nil {
		fields = append(fields, campaign.FieldClicksLimit)
	}
	if m.cost_per_impression != nil {
		fields = append(fields, campaign.FieldCostPerImpression)
	}
	if m.cost_per_click != nil {
		fields = append(fields, campaign.FieldCostPerClick)
	}
	if m.ad_title != nil {
		fields = append(fields, campaign.FieldAdTitle)
	}
	if m.ad_text != nil {
		fields = append(fields, campaign.FieldAdText)
	}
	if m.image_url != nil {
		fields = append(fields, campaign.FieldImageURL)
	}
	if m.start_date != nil {
		fields = append(fields, campaign.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, campaign.FieldEndDate)
	}
	if m.moderated != nil {
		fields = append(fields, campaign.FieldModerated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CampaignMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case campaign.FieldAdvertiserID:
		return m.AdvertiserID()
	case campaign.FieldImpressionsLimit:
		return m.ImpressionsLimit()
	case campaign.FieldClicksLimit:
		return m.ClicksLimit()
	case campaign.FieldCostPerImpression:
		return m.CostPerImpression()
	case campaign.FieldCostPerClick:
		return m.CostPerClick()
	case campaign.FieldAdTitle:
		return m.AdTitle()
	case campaign.FieldAdText:
		return m.AdText()
	case campaign.FieldImageURL:
		return m.ImageURL()
	case campaign.FieldStartDate:
		return m.StartDate()
	case campaign.FieldEndDate:
		return m.EndDate()
	case campaign.FieldModerated:
		return m.Moderated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CampaignMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case campaign.FieldAdvertiserID:
		return m.OldAdvertiserID(ctx)
	case campaign.FieldImpressionsLimit:
		return m.OldImpressionsLimit(ctx)
	case campaign.FieldClicksLimit:
		return m.OldClicksLimit(ctx)
	case campaign.FieldCostPerImpression:
		return m.OldCostPerImpression(ctx)
	case campaign.FieldCostPerClick:
		return m.OldCostPerClick(ctx)
	case campaign.FieldAdTitle:
		return m.OldAdTitle(ctx)
	case campaign.FieldAdText:
		return m.OldAdText(ctx)
	case campaign.FieldImageURL:
		return m.OldImageURL(ctx)
	case campaign.FieldStartDate:
		return m.OldStartDate(ctx)
	case campaign.FieldEndDate:
		return m.OldEndDate(ctx)
	case campaign.FieldModerated:
		return m.OldModerated(ctx)
	}
	return nil, fmt.Errorf("unknown Campaign field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CampaignMutation) SetField(name string, value ent.Value) error {
	switch name {
	case campaign.FieldAdvertiserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdvertiserID(v)
		return nil
	case campaign.FieldImpressionsLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImpressionsLimit(v)
		return nil
	case campaign.FieldClicksLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClicksLimit(v)
		return nil
	case campaign.FieldCostPerImpression:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCostPerImpression(v)
		return nil
	case campaign.FieldCostPerClick:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCostPerClick(v)
		return nil
	case campaign.FieldAdTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdTitle(v)
		return nil
	case campaign.FieldAdText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdText(v)
		return nil
	case campaign.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case campaign.FieldStartDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case campaign.FieldEndDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case campaign.FieldModerated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModerated(v)
		return nil
	}
	return fmt.Errorf("unknown Campaign field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CampaignMutation) AddedFields() []string {
	var fields []string
	if m.addimpressions_limit != nil {
		fields = append(fields, campaign.FieldImpressionsLimit)
	}
	if m.addclicks_limit != nil {
		fields = append(fields, campaign.FieldClicksLimit)
	}
	if m.addcost_per_impression != nil {
		fields = append(fields, campaign.FieldCostPerImpression)
	}
	if m.addcost_per_click != nil {
		fields = append(fields, campaign.FieldCostPerClick)
	}
	if m.addstart_date != nil {
		fields = append(fields, campaign.FieldStartDate)
	}
	if m.addend_date != nil {
		fields = append(fields, campaign.FieldEndDate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CampaignMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case campaign.FieldImpressionsLimit:
		return m.AddedImpressionsLimit()
	case campaign.FieldClicksLimit:
		return m.AddedClicksLimit()
	case campaign.FieldCostPerImpression:
		return m.AddedCostPerImpression()
	case campaign.FieldCostPerClick:
		return m.AddedCostPerClick()
	case campaign.FieldStartDate:
		return m.AddedStartDate()
	case campaign.FieldEndDate:
		return m.AddedEndDate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CampaignMutation) AddField(name string, value ent.Value) error {
	switch name {
	case campaign.FieldImpressionsLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddImpressionsLimit(v)
		return nil
	case campaign.FieldClicksLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClicksLimit(v)
		return nil
	case campaign.FieldCostPerImpression:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCostPerImpression(v)
		return nil
	case campaign.FieldCostPerClick:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCostPerClick(v)
		return nil
	case campaign.FieldStartDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartDate(v)
		return nil
	case campaign.FieldEndDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndDate(v)
		return nil
	}
	return fmt.Errorf("unknown Campaign numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CampaignMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(campaign.FieldImageURL) {
		fields = append(fields, campaign.FieldImageURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CampaignMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CampaignMutation) ClearField(name string) error {
	switch name {
	case campaign.FieldImageURL:
		m.ClearImageURL()
		return nil
	}
	return fmt.Errorf("unknown Campaign nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CampaignMutation) ResetField(name string) error {
	switch name {
	case campaign.FieldAdvertiserID:
		m.ResetAdvertiserID()
		return nil
	case campaign.FieldImpressionsLimit:
		m.ResetImpressionsLimit()
		return nil
	case campaign.FieldClicksLimit:
		m.ResetClicksLimit()
		return nil
	case campaign.FieldCostPerImpression:
		m.ResetCostPerImpression()
		return nil
	case campaign.FieldCostPerClick:
		m.ResetCostPerClick()
		return nil
	case campaign.FieldAdTitle:
		m.ResetAdTitle()
		return nil
	case campaign.FieldAdText:
		m.ResetAdText()
		return nil
	case campaign.FieldImageURL:
		m.ResetImageURL()
		return nil
	case campaign.FieldStartDate:
		m.ResetStartDate()
		return nil
	case campaign.FieldEndDate:
		m.ResetEndDate()
		return nil
	case campaign.FieldModerated:
		m.ResetModerated()
		return nil
	}
	return fmt.Errorf("unknown Campaign field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CampaignMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.targeting != nil {
		edges = append(edges, campaign.EdgeTargeting)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CampaignMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case campaign.EdgeTargeting:
		if id := m.targeting; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CampaignMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CampaignMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CampaignMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtargeting {
		edges = append(edges, campaign.EdgeTargeting)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CampaignMutation) EdgeCleared(name string) bool {
	switch name {
	case campaign.EdgeTargeting:
		return m.clearedtargeting
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CampaignMutation) ClearEdge(name string) error {
	switch name {
	case campaign.EdgeTargeting:
		m.ClearTargeting()
		return nil
	}
	return fmt.Errorf("unknown Campaign unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CampaignMutation) ResetEdge(name string) error {
	switch name {
	case campaign.EdgeTargeting:
		m.ResetTargeting()
		return nil
	}
	return fmt.Errorf("unknown Campaign edge %s", name)
}

// MlScoreMutation represents an operation that mutates the MlScore nodes in the graph.
type MlScoreMutation struct {
	config
	op                Op
	typ               string
	id                *int
	score             *int64
	addscore          *int64
	clearedFields     map[string]struct{}
	user              *uuid.UUID
	cleareduser       bool
	advertiser        *uuid.UUID
	clearedadvertiser bool
	done              bool
	oldValue          func(context.Context) (*MlScore, error)
	predicates        []predicate.MlScore
}

var _ ent.Mutation = (*MlScoreMutation)(nil)

// mlscoreOption allows management of the mutation configuration using functional options.
type mlscoreOption func(*MlScoreMutation)

// newMlScoreMutation creates new mutation for the MlScore entity.
func newMlScoreMutation(c config, op Op, opts ...mlscoreOption) *MlScoreMutation {
	m := &MlScoreMutation{
		config:        c,
		op:            op,
		typ:           TypeMlScore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMlScoreID sets the ID field of the mutation.
func withMlScoreID(id int) mlscoreOption {
	return func(m *MlScoreMutation) {
		var (
			err   error
			once  sync.Once
			value *MlScore
		)
		m.oldValue = func(ctx context.Context) (*MlScore, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MlScore.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMlScore sets the old MlScore of the mutation.
func withMlScore(node *MlScore) mlscoreOption {
	return func(m *MlScoreMutation) {
		m.oldValue = func(context.Context) (*MlScore, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MlScoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MlScoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MlScoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MlScoreMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MlScore.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *MlScoreMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MlScoreMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the MlScore entity.
// If the MlScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MlScoreMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MlScoreMutation) ResetUserID() {
	m.user = nil
}

// SetAdvertiserID sets the "advertiser_id" field.
func (m *MlScoreMutation) SetAdvertiserID(u uuid.UUID) {
	m.advertiser = &u
}

// AdvertiserID returns the value of the "advertiser_id" field in the mutation.
func (m *MlScoreMutation) AdvertiserID() (r uuid.UUID, exists bool) {
	v := m.advertiser
	if v == nil {
		return
	}
	return *v, true
}

// OldAdvertiserID returns the old "advertiser_id" field's value of the MlScore entity.
// If the MlScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MlScoreMutation) OldAdvertiserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdvertiserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdvertiserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdvertiserID: %w", err)
	}
	return oldValue.AdvertiserID, nil
}

// ResetAdvertiserID resets all changes to the "advertiser_id" field.
func (m *MlScoreMutation) ResetAdvertiserID() {
	m.advertiser = nil
}

// SetScore sets the "score" field.
func (m *MlScoreMutation) SetScore(i int64) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *MlScoreMutation) Score() (r int64, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the MlScore entity.
// If the MlScore object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MlScoreMutation) OldScore(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *MlScoreMutation) AddScore(i int64) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *MlScoreMutation) AddedScore() (r int64, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *MlScoreMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *MlScoreMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[mlscore.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *MlScoreMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *MlScoreMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *MlScoreMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearAdvertiser clears the "advertiser" edge to the Advertiser entity.
func (m *MlScoreMutation) ClearAdvertiser() {
	m.clearedadvertiser = true
	m.clearedFields[mlscore.FieldAdvertiserID] = struct{}{}
}

// AdvertiserCleared reports if the "advertiser" edge to the Advertiser entity was cleared.
func (m *MlScoreMutation) AdvertiserCleared() bool {
	return m.clearedadvertiser
}

// AdvertiserIDs returns the "advertiser" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AdvertiserID instead. It exists only for internal usage by the builders.
func (m *MlScoreMutation) AdvertiserIDs() (ids []uuid.UUID) {
	if id := m.advertiser; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdvertiser resets all changes to the "advertiser" edge.
func (m *MlScoreMutation) ResetAdvertiser() {
	m.advertiser = nil
	m.clearedadvertiser = false
}

// Where appends a list predicates to the MlScoreMutation builder.
func (m *MlScoreMutation) Where(ps ...predicate.MlScore) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MlScoreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MlScoreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MlScore, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MlScoreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MlScoreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MlScore).
func (m *MlScoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MlScoreMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, mlscore.FieldUserID)
	}
	if m.advertiser != nil {
		fields = append(fields, mlscore.FieldAdvertiserID)
	}
	if m.score != nil {
		fields = append(fields, mlscore.FieldScore)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MlScoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mlscore.FieldUserID:
		return m.UserID()
	case mlscore.FieldAdvertiserID:
		return m.AdvertiserID()
	case mlscore.FieldScore:
		return m.Score()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MlScoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mlscore.FieldUserID:
		return m.OldUserID(ctx)
	case mlscore.FieldAdvertiserID:
		return m.OldAdvertiserID(ctx)
	case mlscore.FieldScore:
		return m.OldScore(ctx)
	}
	return nil, fmt.Errorf("unknown MlScore field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MlScoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mlscore.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case mlscore.FieldAdvertiserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdvertiserID(v)
		return nil
	case mlscore.FieldScore:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	}
	return fmt.Errorf("unknown MlScore field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MlScoreMutation) AddedFields() []string {
	var fields []string
	if m.addscore != nil {
		fields = append(fields, mlscore.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MlScoreMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mlscore.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MlScoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mlscore.FieldScore:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown MlScore numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MlScoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MlScoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MlScoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MlScore nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MlScoreMutation) ResetField(name string) error {
	switch name {
	case mlscore.FieldUserID:
		m.ResetUserID()
		return nil
	case mlscore.FieldAdvertiserID:
		m.ResetAdvertiserID()
		return nil
	case mlscore.FieldScore:
		m.ResetScore()
		return nil
	}
	return fmt.Errorf("unknown MlScore field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MlScoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, mlscore.EdgeUser)
	}
	if m.advertiser != nil {
		edges = append(edges, mlscore.EdgeAdvertiser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MlScoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mlscore.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case mlscore.EdgeAdvertiser:
		if id := m.advertiser; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MlScoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MlScoreMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MlScoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, mlscore.EdgeUser)
	}
	if m.clearedadvertiser {
		edges = append(edges, mlscore.EdgeAdvertiser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MlScoreMutation) EdgeCleared(name string) bool {
	switch name {
	case mlscore.EdgeUser:
		return m.cleareduser
	case mlscore.EdgeAdvertiser:
		return m.clearedadvertiser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MlScoreMutation) ClearEdge(name string) error {
	switch name {
	case mlscore.EdgeUser:
		m.ClearUser()
		return nil
	case mlscore.EdgeAdvertiser:
		m.ClearAdvertiser()
		return nil
	}
	return fmt.Errorf("unknown MlScore unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MlScoreMutation) ResetEdge(name string) error {
	switch name {
	case mlscore.EdgeUser:
		m.ResetUser()
		return nil
	case mlscore.EdgeAdvertiser:
		m.ResetAdvertiser()
		return nil
	}
	return fmt.Errorf("unknown MlScore edge %s", name)
}

// TargetingMutation represents an operation that mutates the Targeting nodes in the graph.
type TargetingMutation struct {
	config
	op              Op
	typ             string
	id              *int
	gender          *targeting.Gender
	age_from        *int
	addage_from     *int
	age_to          *int
	addage_to       *int
	location        *string
	clearedFields   map[string]struct{}
	campaign        *uuid.UUID
	clearedcampaign bool
	done            bool
	oldValue        func(context.Context) (*Targeting, error)
	predicates      []predicate.Targeting
}

var _ ent.Mutation = (*TargetingMutation)(nil)

// targetingOption allows management of the mutation configuration using functional options.
type targetingOption func(*TargetingMutation)

// newTargetingMutation creates new mutation for the Targeting entity.
func newTargetingMutation(c config, op Op, opts ...targetingOption) *TargetingMutation {
	m := &TargetingMutation{
		config:        c,
		op:            op,
		typ:           TypeTargeting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTargetingID sets the ID field of the mutation.
func withTargetingID(id int) targetingOption {
	return func(m *TargetingMutation) {
		var (
			err   error
			once  sync.Once
			value *Targeting
		)
		m.oldValue = func(ctx context.Context) (*Targeting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Targeting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTargeting sets the old Targeting of the mutation.
func withTargeting(node *Targeting) targetingOption {
	return func(m *TargetingMutation) {
		m.oldValue = func(context.Context) (*Targeting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TargetingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TargetingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TargetingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TargetingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Targeting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGender sets the "gender" field.
func (m *TargetingMutation) SetGender(t targeting.Gender) {
	m.gender = &t
}

// Gender returns the value of the "gender" field in the mutation.
func (m *TargetingMutation) Gender() (r targeting.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Targeting entity.
// If the Targeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetingMutation) OldGender(ctx context.Context) (v *targeting.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *TargetingMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[targeting.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *TargetingMutation) GenderCleared() bool {
	_, ok := m.clearedFields[targeting.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *TargetingMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, targeting.FieldGender)
}

// SetAgeFrom sets the "age_from" field.
func (m *TargetingMutation) SetAgeFrom(i int) {
	m.age_from = &i
	m.addage_from = nil
}

// AgeFrom returns the value of the "age_from" field in the mutation.
func (m *TargetingMutation) AgeFrom() (r int, exists bool) {
	v := m.age_from
	if v == nil {
		return
	}
	return *v, true
}

// OldAgeFrom returns the old "age_from" field's value of the Targeting entity.
// If the Targeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetingMutation) OldAgeFrom(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgeFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgeFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgeFrom: %w", err)
	}
	return oldValue.AgeFrom, nil
}

// AddAgeFrom adds i to the "age_from" field.
func (m *TargetingMutation) AddAgeFrom(i int) {
	if m.addage_from != nil {
		*m.addage_from += i
	} else {
		m.addage_from = &i
	}
}

// AddedAgeFrom returns the value that was added to the "age_from" field in this mutation.
func (m *TargetingMutation) AddedAgeFrom() (r int, exists bool) {
	v := m.addage_from
	if v == nil {
		return
	}
	return *v, true
}

// ClearAgeFrom clears the value of the "age_from" field.
func (m *TargetingMutation) ClearAgeFrom() {
	m.age_from = nil
	m.addage_from = nil
	m.clearedFields[targeting.FieldAgeFrom] = struct{}{}
}

// AgeFromCleared returns if the "age_from" field was cleared in this mutation.
func (m *TargetingMutation) AgeFromCleared() bool {
	_, ok := m.clearedFields[targeting.FieldAgeFrom]
	return ok
}

// ResetAgeFrom resets all changes to the "age_from" field.
func (m *TargetingMutation) ResetAgeFrom() {
	m.age_from = nil
	m.addage_from = nil
	delete(m.clearedFields, targeting.FieldAgeFrom)
}

// SetAgeTo sets the "age_to" field.
func (m *TargetingMutation) SetAgeTo(i int) {
	m.age_to = &i
	m.addage_to = nil
}

// AgeTo returns the value of the "age_to" field in the mutation.
func (m *TargetingMutation) AgeTo() (r int, exists bool) {
	v := m.age_to
	if v == nil {
		return
	}
	return *v, true
}

// OldAgeTo returns the old "age_to" field's value of the Targeting entity.
// If the Targeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetingMutation) OldAgeTo(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgeTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgeTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgeTo: %w", err)
	}
	return oldValue.AgeTo, nil
}

// AddAgeTo adds i to the "age_to" field.
func (m *TargetingMutation) AddAgeTo(i int) {
	if m.addage_to != nil {
		*m.addage_to += i
	} else {
		m.addage_to = &i
	}
}

// AddedAgeTo returns the value that was added to the "age_to" field in this mutation.
func (m *TargetingMutation) AddedAgeTo() (r int, exists bool) {
	v := m.addage_to
	if v == nil {
		return
	}
	return *v, true
}

// ClearAgeTo clears the value of the "age_to" field.
func (m *TargetingMutation) ClearAgeTo() {
	m.age_to = nil
	m.addage_to = nil
	m.clearedFields[targeting.FieldAgeTo] = struct{}{}
}

// AgeToCleared returns if the "age_to" field was cleared in this mutation.
func (m *TargetingMutation) AgeToCleared() bool {
	_, ok := m.clearedFields[targeting.FieldAgeTo]
	return ok
}

// ResetAgeTo resets all changes to the "age_to" field.
func (m *TargetingMutation) ResetAgeTo() {
	m.age_to = nil
	m.addage_to = nil
	delete(m.clearedFields, targeting.FieldAgeTo)
}

// SetLocation sets the "location" field.
func (m *TargetingMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *TargetingMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Targeting entity.
// If the Targeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetingMutation) OldLocation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *TargetingMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[targeting.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *TargetingMutation) LocationCleared() bool {
	_, ok := m.clearedFields[targeting.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *TargetingMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, targeting.FieldLocation)
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by id.
func (m *TargetingMutation) SetCampaignID(id uuid.UUID) {
	m.campaign = &id
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (m *TargetingMutation) ClearCampaign() {
	m.clearedcampaign = true
}

// CampaignCleared reports if the "campaign" edge to the Campaign entity was cleared.
func (m *TargetingMutation) CampaignCleared() bool {
	return m.clearedcampaign
}

// CampaignID returns the "campaign" edge ID in the mutation.
func (m *TargetingMutation) CampaignID() (id uuid.UUID, exists bool) {
	if m.campaign != nil {
		return *m.campaign, true
	}
	return
}

// CampaignIDs returns the "campaign" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CampaignID instead. It exists only for internal usage by the builders.
func (m *TargetingMutation) CampaignIDs() (ids []uuid.UUID) {
	if id := m.campaign; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCampaign resets all changes to the "campaign" edge.
func (m *TargetingMutation) ResetCampaign() {
	m.campaign = nil
	m.clearedcampaign = false
}

// Where appends a list predicates to the TargetingMutation builder.
func (m *TargetingMutation) Where(ps ...predicate.Targeting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TargetingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TargetingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Targeting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TargetingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TargetingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Targeting).
func (m *TargetingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TargetingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.gender != nil {
		fields = append(fields, targeting.FieldGender)
	}
	if m.age_from != nil {
		fields = append(fields, targeting.FieldAgeFrom)
	}
	if m.age_to != nil {
		fields = append(fields, targeting.FieldAgeTo)
	}
	if m.location != nil {
		fields = append(fields, targeting.FieldLocation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TargetingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case targeting.FieldGender:
		return m.Gender()
	case targeting.FieldAgeFrom:
		return m.AgeFrom()
	case targeting.FieldAgeTo:
		return m.AgeTo()
	case targeting.FieldLocation:
		return m.Location()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TargetingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case targeting.FieldGender:
		return m.OldGender(ctx)
	case targeting.FieldAgeFrom:
		return m.OldAgeFrom(ctx)
	case targeting.FieldAgeTo:
		return m.OldAgeTo(ctx)
	case targeting.FieldLocation:
		return m.OldLocation(ctx)
	}
	return nil, fmt.Errorf("unknown Targeting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case targeting.FieldGender:
		v, ok := value.(targeting.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case targeting.FieldAgeFrom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgeFrom(v)
		return nil
	case targeting.FieldAgeTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgeTo(v)
		return nil
	case targeting.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	}
	return fmt.Errorf("unknown Targeting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TargetingMutation) AddedFields() []string {
	var fields []string
	if m.addage_from != nil {
		fields = append(fields, targeting.FieldAgeFrom)
	}
	if m.addage_to != nil {
		fields = append(fields, targeting.FieldAgeTo)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TargetingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case targeting.FieldAgeFrom:
		return m.AddedAgeFrom()
	case targeting.FieldAgeTo:
		return m.AddedAgeTo()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case targeting.FieldAgeFrom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAgeFrom(v)
		return nil
	case targeting.FieldAgeTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAgeTo(v)
		return nil
	}
	return fmt.Errorf("unknown Targeting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TargetingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(targeting.FieldGender) {
		fields = append(fields, targeting.FieldGender)
	}
	if m.FieldCleared(targeting.FieldAgeFrom) {
		fields = append(fields, targeting.FieldAgeFrom)
	}
	if m.FieldCleared(targeting.FieldAgeTo) {
		fields = append(fields, targeting.FieldAgeTo)
	}
	if m.FieldCleared(targeting.FieldLocation) {
		fields = append(fields, targeting.FieldLocation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TargetingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TargetingMutation) ClearField(name string) error {
	switch name {
	case targeting.FieldGender:
		m.ClearGender()
		return nil
	case targeting.FieldAgeFrom:
		m.ClearAgeFrom()
		return nil
	case targeting.FieldAgeTo:
		m.ClearAgeTo()
		return nil
	case targeting.FieldLocation:
		m.ClearLocation()
		return nil
	}
	return fmt.Errorf("unknown Targeting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TargetingMutation) ResetField(name string) error {
	switch name {
	case targeting.FieldGender:
		m.ResetGender()
		return nil
	case targeting.FieldAgeFrom:
		m.ResetAgeFrom()
		return nil
	case targeting.FieldAgeTo:
		m.ResetAgeTo()
		return nil
	case targeting.FieldLocation:
		m.ResetLocation()
		return nil
	}
	return fmt.Errorf("unknown Targeting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TargetingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.campaign != nil {
		edges = append(edges, targeting.EdgeCampaign)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TargetingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case targeting.EdgeCampaign:
		if id := m.campaign; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TargetingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TargetingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TargetingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcampaign {
		edges = append(edges, targeting.EdgeCampaign)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TargetingMutation) EdgeCleared(name string) bool {
	switch name {
	case targeting.EdgeCampaign:
		return m.clearedcampaign
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TargetingMutation) ClearEdge(name string) error {
	switch name {
	case targeting.EdgeCampaign:
		m.ClearCampaign()
		return nil
	}
	return fmt.Errorf("unknown Targeting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TargetingMutation) ResetEdge(name string) error {
	switch name {
	case targeting.EdgeCampaign:
		m.ResetCampaign()
		return nil
	}
	return fmt.Errorf("unknown Targeting edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	login         *string
	age           *int
	addage        *int
	location      *string
	gender        *user.Gender
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLogin sets the "login" field.
func (m *UserMutation) SetLogin(s string) {
	m.login = &s
}

// Login returns the value of the "login" field in the mutation.
func (m *UserMutation) Login() (r string, exists bool) {
	v := m.login
	if v == nil {
		return
	}
	return *v, true
}

// OldLogin returns the old "login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogin: %w", err)
	}
	return oldValue.Login, nil
}

// ResetLogin resets all changes to the "login" field.
func (m *UserMutation) ResetLogin() {
	m.login = nil
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *UserMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[user.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *UserMutation) AgeCleared() bool {
	_, ok := m.clearedFields[user.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, user.FieldAge)
}

// SetLocation sets the "location" field.
func (m *UserMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *UserMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *UserMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[user.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *UserMutation) LocationCleared() bool {
	_, ok := m.clearedFields[user.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *UserMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, user.FieldLocation)
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(u user.Gender) {
	m.gender = &u
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r user.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v user.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *UserMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[user.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *UserMutation) GenderCleared() bool {
	_, ok := m.clearedFields[user.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, user.FieldGender)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.login != nil {
		fields = append(fields, user.FieldLogin)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.location != nil {
		fields = append(fields, user.FieldLocation)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldLogin:
		return m.Login()
	case user.FieldAge:
		return m.Age()
	case user.FieldLocation:
		return m.Location()
	case user.FieldGender:
		return m.Gender()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldLogin:
		return m.OldLogin(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldLocation:
		return m.OldLocation(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogin(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case user.FieldGender:
		v, ok := value.(user.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAge) {
		fields = append(fields, user.FieldAge)
	}
	if m.FieldCleared(user.FieldLocation) {
		fields = append(fields, user.FieldLocation)
	}
	if m.FieldCleared(user.FieldGender) {
		fields = append(fields, user.FieldGender)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAge:
		m.ClearAge()
		return nil
	case user.FieldLocation:
		m.ClearLocation()
		return nil
	case user.FieldGender:
		m.ClearGender()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldLogin:
		m.ResetLogin()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldLocation:
		m.ResetLocation()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

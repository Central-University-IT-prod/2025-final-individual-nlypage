// Code generated by ent, DO NOT EDIT.

package targeting

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the targeting type in the database.
	Label = "targeting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAgeFrom holds the string denoting the age_from field in the database.
	FieldAgeFrom = "age_from"
	// FieldAgeTo holds the string denoting the age_to field in the database.
	FieldAgeTo = "age_to"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// EdgeCampaign holds the string denoting the campaign edge name in mutations.
	EdgeCampaign = "campaign"
	// Table holds the table name of the targeting in the database.
	Table = "targetings"
	// CampaignTable is the table that holds the campaign relation/edge.
	CampaignTable = "targetings"
	// CampaignInverseTable is the table name for the Campaign entity.
	// It exists in this package in order to avoid circular dependency with the "campaign" package.
	CampaignInverseTable = "campaigns"
	// CampaignColumn is the table column denoting the campaign relation/edge.
	CampaignColumn = "campaign_targeting"
)

// Columns holds all SQL columns for targeting fields.
var Columns = []string{
	FieldID,
	FieldGender,
	FieldAgeFrom,
	FieldAgeTo,
	FieldLocation,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "targetings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"campaign_targeting",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMALE   Gender = "MALE"
	GenderFEMALE Gender = "FEMALE"
	GenderALL    Gender = "ALL"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMALE, GenderFEMALE, GenderALL:
		return nil
	default:
		return fmt.Errorf("targeting: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the Targeting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByAgeFrom orders the results by the age_from field.
func ByAgeFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeFrom, opts...).ToFunc()
}

// ByAgeTo orders the results by the age_to field.
func ByAgeTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeTo, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByCampaignField orders the results by campaign field.
func ByCampaignField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignStep(), sql.OrderByField(field, opts...))
	}
}
func newCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CampaignTable, CampaignColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package targeting

import (
	"nlypage-final/internal/adapters/database/postgres/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Targeting {
	return predicate.Targeting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Targeting {
	return predicate.Targeting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Targeting {
	return predicate.Targeting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Targeting {
	return predicate.Targeting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Targeting {
	return predicate.Targeting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Targeting {
	return predicate.Targeting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Targeting {
	return predicate.Targeting(sql.FieldLTE(FieldID, id))
}

// AgeFrom applies equality check predicate on the "age_from" field. It's identical to AgeFromEQ.
func AgeFrom(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldAgeFrom, v))
}

// AgeTo applies equality check predicate on the "age_to" field. It's identical to AgeToEQ.
func AgeTo(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldAgeTo, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldLocation, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Targeting {
	return predicate.Targeting(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Targeting {
	return predicate.Targeting(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Targeting {
	return predicate.Targeting(sql.FieldNotIn(FieldGender, vs...))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldNotNull(FieldGender))
}

// AgeFromEQ applies the EQ predicate on the "age_from" field.
func AgeFromEQ(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldAgeFrom, v))
}

// AgeFromNEQ applies the NEQ predicate on the "age_from" field.
func AgeFromNEQ(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldNEQ(FieldAgeFrom, v))
}

// AgeFromIn applies the In predicate on the "age_from" field.
func AgeFromIn(vs ...int) predicate.Targeting {
	return predicate.Targeting(sql.FieldIn(FieldAgeFrom, vs...))
}

// AgeFromNotIn applies the NotIn predicate on the "age_from" field.
func AgeFromNotIn(vs ...int) predicate.Targeting {
	return predicate.Targeting(sql.FieldNotIn(FieldAgeFrom, vs...))
}

// AgeFromGT applies the GT predicate on the "age_from" field.
func AgeFromGT(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldGT(FieldAgeFrom, v))
}

// AgeFromGTE applies the GTE predicate on the "age_from" field.
func AgeFromGTE(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldGTE(FieldAgeFrom, v))
}

// AgeFromLT applies the LT predicate on the "age_from" field.
func AgeFromLT(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldLT(FieldAgeFrom, v))
}

// AgeFromLTE applies the LTE predicate on the "age_from" field.
func AgeFromLTE(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldLTE(FieldAgeFrom, v))
}

// AgeFromIsNil applies the IsNil predicate on the "age_from" field.
func AgeFromIsNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldIsNull(FieldAgeFrom))
}

// AgeFromNotNil applies the NotNil predicate on the "age_from" field.
func AgeFromNotNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldNotNull(FieldAgeFrom))
}

// AgeToEQ applies the EQ predicate on the "age_to" field.
func AgeToEQ(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldAgeTo, v))
}

// AgeToNEQ applies the NEQ predicate on the "age_to" field.
func AgeToNEQ(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldNEQ(FieldAgeTo, v))
}

// AgeToIn applies the In predicate on the "age_to" field.
func AgeToIn(vs ...int) predicate.Targeting {
	return predicate.Targeting(sql.FieldIn(FieldAgeTo, vs...))
}

// AgeToNotIn applies the NotIn predicate on the "age_to" field.
func AgeToNotIn(vs ...int) predicate.Targeting {
	return predicate.Targeting(sql.FieldNotIn(FieldAgeTo, vs...))
}

// AgeToGT applies the GT predicate on the "age_to" field.
func AgeToGT(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldGT(FieldAgeTo, v))
}

// AgeToGTE applies the GTE predicate on the "age_to" field.
func AgeToGTE(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldGTE(FieldAgeTo, v))
}

// AgeToLT applies the LT predicate on the "age_to" field.
func AgeToLT(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldLT(FieldAgeTo, v))
}

// AgeToLTE applies the LTE predicate on the "age_to" field.
func AgeToLTE(v int) predicate.Targeting {
	return predicate.Targeting(sql.FieldLTE(FieldAgeTo, v))
}

// AgeToIsNil applies the IsNil predicate on the "age_to" field.
func AgeToIsNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldIsNull(FieldAgeTo))
}

// AgeToNotNil applies the NotNil predicate on the "age_to" field.
func AgeToNotNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldNotNull(FieldAgeTo))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Targeting {
	return predicate.Targeting(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Targeting {
	return predicate.Targeting(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Targeting {
	return predicate.Targeting(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Targeting {
	return predicate.Targeting(sql.FieldContainsFold(FieldLocation, v))
}

// HasCampaign applies the HasEdge predicate on the "campaign" edge.
func HasCampaign() predicate.Targeting {
	return predicate.Targeting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CampaignTable, CampaignColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCampaignWith applies the HasEdge predicate on the "campaign" edge with a given conditions (other predicates).
func HasCampaignWith(preds ...predicate.Campaign) predicate.Targeting {
	return predicate.Targeting(func(s *sql.Selector) {
		step := newCampaignStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Targeting) predicate.Targeting {
	return predicate.Targeting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Targeting) predicate.Targeting {
	return predicate.Targeting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Targeting) predicate.Targeting {
	return predicate.Targeting(sql.NotPredicates(p))
}

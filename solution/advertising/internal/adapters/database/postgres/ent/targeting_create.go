// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/campaign"
	"nlypage-final/internal/adapters/database/postgres/ent/targeting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TargetingCreate is the builder for creating a Targeting entity.
type TargetingCreate struct {
	config
	mutation *TargetingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGender sets the "gender" field.
func (tc *TargetingCreate) SetGender(t targeting.Gender) *TargetingCreate {
	tc.mutation.SetGender(t)
	return tc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (tc *TargetingCreate) SetNillableGender(t *targeting.Gender) *TargetingCreate {
	if t != nil {
		tc.SetGender(*t)
	}
	return tc
}

// SetAgeFrom sets the "age_from" field.
func (tc *TargetingCreate) SetAgeFrom(i int) *TargetingCreate {
	tc.mutation.SetAgeFrom(i)
	return tc
}

// SetNillableAgeFrom sets the "age_from" field if the given value is not nil.
func (tc *TargetingCreate) SetNillableAgeFrom(i *int) *TargetingCreate {
	if i != nil {
		tc.SetAgeFrom(*i)
	}
	return tc
}

// SetAgeTo sets the "age_to" field.
func (tc *TargetingCreate) SetAgeTo(i int) *TargetingCreate {
	tc.mutation.SetAgeTo(i)
	return tc
}

// SetNillableAgeTo sets the "age_to" field if the given value is not nil.
func (tc *TargetingCreate) SetNillableAgeTo(i *int) *TargetingCreate {
	if i != nil {
		tc.SetAgeTo(*i)
	}
	return tc
}

// SetLocation sets the "location" field.
func (tc *TargetingCreate) SetLocation(s string) *TargetingCreate {
	tc.mutation.SetLocation(s)
	return tc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (tc *TargetingCreate) SetNillableLocation(s *string) *TargetingCreate {
	if s != nil {
		tc.SetLocation(*s)
	}
	return tc
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (tc *TargetingCreate) SetCampaignID(id uuid.UUID) *TargetingCreate {
	tc.mutation.SetCampaignID(id)
	return tc
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (tc *TargetingCreate) SetCampaign(c *Campaign) *TargetingCreate {
	return tc.SetCampaignID(c.ID)
}

// Mutation returns the TargetingMutation object of the builder.
func (tc *TargetingCreate) Mutation() *TargetingMutation {
	return tc.mutation
}

// Save creates the Targeting in the database.
func (tc *TargetingCreate) Save(ctx context.Context) (*Targeting, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TargetingCreate) SaveX(ctx context.Context) *Targeting {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TargetingCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TargetingCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TargetingCreate) check() error {
	if v, ok := tc.mutation.Gender(); ok {
		if err := targeting.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Targeting.gender": %w`, err)}
		}
	}
	if len(tc.mutation.CampaignIDs()) == 0 {
		return &ValidationError{Name: "campaign", err: errors.New(`ent: missing required edge "Targeting.campaign"`)}
	}
	return nil
}

func (tc *TargetingCreate) sqlSave(ctx context.Context) (*Targeting, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TargetingCreate) createSpec() (*Targeting, *sqlgraph.CreateSpec) {
	var (
		_node = &Targeting{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(targeting.Table, sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Gender(); ok {
		_spec.SetField(targeting.FieldGender, field.TypeEnum, value)
		_node.Gender = &value
	}
	if value, ok := tc.mutation.AgeFrom(); ok {
		_spec.SetField(targeting.FieldAgeFrom, field.TypeInt, value)
		_node.AgeFrom = &value
	}
	if value, ok := tc.mutation.AgeTo(); ok {
		_spec.SetField(targeting.FieldAgeTo, field.TypeInt, value)
		_node.AgeTo = &value
	}
	if value, ok := tc.mutation.Location(); ok {
		_spec.SetField(targeting.FieldLocation, field.TypeString, value)
		_node.Location = &value
	}
	if nodes := tc.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   targeting.CampaignTable,
			Columns: []string{targeting.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.campaign_targeting = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Targeting.Create().
//		SetGender(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetingUpsert) {
//			SetGender(v+v).
//		}).
//		Exec(ctx)
func (tc *TargetingCreate) OnConflict(opts ...sql.ConflictOption) *TargetingUpsertOne {
	tc.conflict = opts
	return &TargetingUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Targeting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TargetingCreate) OnConflictColumns(columns ...string) *TargetingUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TargetingUpsertOne{
		create: tc,
	}
}

type (
	// TargetingUpsertOne is the builder for "upsert"-ing
	//  one Targeting node.
	TargetingUpsertOne struct {
		create *TargetingCreate
	}

	// TargetingUpsert is the "OnConflict" setter.
	TargetingUpsert struct {
		*sql.UpdateSet
	}
)

// SetGender sets the "gender" field.
func (u *TargetingUpsert) SetGender(v targeting.Gender) *TargetingUpsert {
	u.Set(targeting.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *TargetingUpsert) UpdateGender() *TargetingUpsert {
	u.SetExcluded(targeting.FieldGender)
	return u
}

// ClearGender clears the value of the "gender" field.
func (u *TargetingUpsert) ClearGender() *TargetingUpsert {
	u.SetNull(targeting.FieldGender)
	return u
}

// SetAgeFrom sets the "age_from" field.
func (u *TargetingUpsert) SetAgeFrom(v int) *TargetingUpsert {
	u.Set(targeting.FieldAgeFrom, v)
	return u
}

// UpdateAgeFrom sets the "age_from" field to the value that was provided on create.
func (u *TargetingUpsert) UpdateAgeFrom() *TargetingUpsert {
	u.SetExcluded(targeting.FieldAgeFrom)
	return u
}

// AddAgeFrom adds v to the "age_from" field.
func (u *TargetingUpsert) AddAgeFrom(v int) *TargetingUpsert {
	u.Add(targeting.FieldAgeFrom, v)
	return u
}

// ClearAgeFrom clears the value of the "age_from" field.
func (u *TargetingUpsert) ClearAgeFrom() *TargetingUpsert {
	u.SetNull(targeting.FieldAgeFrom)
	return u
}

// SetAgeTo sets the "age_to" field.
func (u *TargetingUpsert) SetAgeTo(v int) *TargetingUpsert {
	u.Set(targeting.FieldAgeTo, v)
	return u
}

// UpdateAgeTo sets the "age_to" field to the value that was provided on create.
func (u *TargetingUpsert) UpdateAgeTo() *TargetingUpsert {
	u.SetExcluded(targeting.FieldAgeTo)
	return u
}

// AddAgeTo adds v to the "age_to" field.
func (u *TargetingUpsert) AddAgeTo(v int) *TargetingUpsert {
	u.Add(targeting.FieldAgeTo, v)
	return u
}

// ClearAgeTo clears the value of the "age_to" field.
func (u *TargetingUpsert) ClearAgeTo() *TargetingUpsert {
	u.SetNull(targeting.FieldAgeTo)
	return u
}

// SetLocation sets the "location" field.
func (u *TargetingUpsert) SetLocation(v string) *TargetingUpsert {
	u.Set(targeting.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *TargetingUpsert) UpdateLocation() *TargetingUpsert {
	u.SetExcluded(targeting.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *TargetingUpsert) ClearLocation() *TargetingUpsert {
	u.SetNull(targeting.FieldLocation)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Targeting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TargetingUpsertOne) UpdateNewValues() *TargetingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Targeting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TargetingUpsertOne) Ignore() *TargetingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetingUpsertOne) DoNothing() *TargetingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetingCreate.OnConflict
// documentation for more info.
func (u *TargetingUpsertOne) Update(set func(*TargetingUpsert)) *TargetingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetingUpsert{UpdateSet: update})
	}))
	return u
}

// SetGender sets the "gender" field.
func (u *TargetingUpsertOne) SetGender(v targeting.Gender) *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *TargetingUpsertOne) UpdateGender() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *TargetingUpsertOne) ClearGender() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearGender()
	})
}

// SetAgeFrom sets the "age_from" field.
func (u *TargetingUpsertOne) SetAgeFrom(v int) *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.SetAgeFrom(v)
	})
}

// AddAgeFrom adds v to the "age_from" field.
func (u *TargetingUpsertOne) AddAgeFrom(v int) *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.AddAgeFrom(v)
	})
}

// UpdateAgeFrom sets the "age_from" field to the value that was provided on create.
func (u *TargetingUpsertOne) UpdateAgeFrom() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateAgeFrom()
	})
}

// ClearAgeFrom clears the value of the "age_from" field.
func (u *TargetingUpsertOne) ClearAgeFrom() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearAgeFrom()
	})
}

// SetAgeTo sets the "age_to" field.
func (u *TargetingUpsertOne) SetAgeTo(v int) *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.SetAgeTo(v)
	})
}

// AddAgeTo adds v to the "age_to" field.
func (u *TargetingUpsertOne) AddAgeTo(v int) *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.AddAgeTo(v)
	})
}

// UpdateAgeTo sets the "age_to" field to the value that was provided on create.
func (u *TargetingUpsertOne) UpdateAgeTo() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateAgeTo()
	})
}

// ClearAgeTo clears the value of the "age_to" field.
func (u *TargetingUpsertOne) ClearAgeTo() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearAgeTo()
	})
}

// SetLocation sets the "location" field.
func (u *TargetingUpsertOne) SetLocation(v string) *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *TargetingUpsertOne) UpdateLocation() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *TargetingUpsertOne) ClearLocation() *TargetingUpsertOne {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearLocation()
	})
}

// Exec executes the query.
func (u *TargetingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TargetingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TargetingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TargetingCreateBulk is the builder for creating many Targeting entities in bulk.
type TargetingCreateBulk struct {
	config
	err      error
	builders []*TargetingCreate
	conflict []sql.ConflictOption
}

// Save creates the Targeting entities in the database.
func (tcb *TargetingCreateBulk) Save(ctx context.Context) ([]*Targeting, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Targeting, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TargetingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TargetingCreateBulk) SaveX(ctx context.Context) []*Targeting {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TargetingCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TargetingCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Targeting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetingUpsert) {
//			SetGender(v+v).
//		}).
//		Exec(ctx)
func (tcb *TargetingCreateBulk) OnConflict(opts ...sql.ConflictOption) *TargetingUpsertBulk {
	tcb.conflict = opts
	return &TargetingUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Targeting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TargetingCreateBulk) OnConflictColumns(columns ...string) *TargetingUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TargetingUpsertBulk{
		create: tcb,
	}
}

// TargetingUpsertBulk is the builder for "upsert"-ing
// a bulk of Targeting nodes.
type TargetingUpsertBulk struct {
	create *TargetingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Targeting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TargetingUpsertBulk) UpdateNewValues() *TargetingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Targeting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TargetingUpsertBulk) Ignore() *TargetingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetingUpsertBulk) DoNothing() *TargetingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetingCreateBulk.OnConflict
// documentation for more info.
func (u *TargetingUpsertBulk) Update(set func(*TargetingUpsert)) *TargetingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetingUpsert{UpdateSet: update})
	}))
	return u
}

// SetGender sets the "gender" field.
func (u *TargetingUpsertBulk) SetGender(v targeting.Gender) *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *TargetingUpsertBulk) UpdateGender() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *TargetingUpsertBulk) ClearGender() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearGender()
	})
}

// SetAgeFrom sets the "age_from" field.
func (u *TargetingUpsertBulk) SetAgeFrom(v int) *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.SetAgeFrom(v)
	})
}

// AddAgeFrom adds v to the "age_from" field.
func (u *TargetingUpsertBulk) AddAgeFrom(v int) *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.AddAgeFrom(v)
	})
}

// UpdateAgeFrom sets the "age_from" field to the value that was provided on create.
func (u *TargetingUpsertBulk) UpdateAgeFrom() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateAgeFrom()
	})
}

// ClearAgeFrom clears the value of the "age_from" field.
func (u *TargetingUpsertBulk) ClearAgeFrom() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearAgeFrom()
	})
}

// SetAgeTo sets the "age_to" field.
func (u *TargetingUpsertBulk) SetAgeTo(v int) *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.SetAgeTo(v)
	})
}

// AddAgeTo adds v to the "age_to" field.
func (u *TargetingUpsertBulk) AddAgeTo(v int) *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.AddAgeTo(v)
	})
}

// UpdateAgeTo sets the "age_to" field to the value that was provided on create.
func (u *TargetingUpsertBulk) UpdateAgeTo() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateAgeTo()
	})
}

// ClearAgeTo clears the value of the "age_to" field.
func (u *TargetingUpsertBulk) ClearAgeTo() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearAgeTo()
	})
}

// SetLocation sets the "location" field.
func (u *TargetingUpsertBulk) SetLocation(v string) *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *TargetingUpsertBulk) UpdateLocation() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *TargetingUpsertBulk) ClearLocation() *TargetingUpsertBulk {
	return u.Update(func(s *TargetingUpsert) {
		s.ClearLocation()
	})
}

// Exec executes the query.
func (u *TargetingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TargetingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

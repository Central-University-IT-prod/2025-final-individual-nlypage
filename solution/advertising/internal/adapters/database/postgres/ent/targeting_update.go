// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nlypage-final/internal/adapters/database/postgres/ent/campaign"
	"nlypage-final/internal/adapters/database/postgres/ent/predicate"
	"nlypage-final/internal/adapters/database/postgres/ent/targeting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TargetingUpdate is the builder for updating Targeting entities.
type TargetingUpdate struct {
	config
	hooks    []Hook
	mutation *TargetingMutation
}

// Where appends a list predicates to the TargetingUpdate builder.
func (tu *TargetingUpdate) Where(ps ...predicate.Targeting) *TargetingUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetGender sets the "gender" field.
func (tu *TargetingUpdate) SetGender(t targeting.Gender) *TargetingUpdate {
	tu.mutation.SetGender(t)
	return tu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (tu *TargetingUpdate) SetNillableGender(t *targeting.Gender) *TargetingUpdate {
	if t != nil {
		tu.SetGender(*t)
	}
	return tu
}

// ClearGender clears the value of the "gender" field.
func (tu *TargetingUpdate) ClearGender() *TargetingUpdate {
	tu.mutation.ClearGender()
	return tu
}

// SetAgeFrom sets the "age_from" field.
func (tu *TargetingUpdate) SetAgeFrom(i int) *TargetingUpdate {
	tu.mutation.ResetAgeFrom()
	tu.mutation.SetAgeFrom(i)
	return tu
}

// SetNillableAgeFrom sets the "age_from" field if the given value is not nil.
func (tu *TargetingUpdate) SetNillableAgeFrom(i *int) *TargetingUpdate {
	if i != nil {
		tu.SetAgeFrom(*i)
	}
	return tu
}

// AddAgeFrom adds i to the "age_from" field.
func (tu *TargetingUpdate) AddAgeFrom(i int) *TargetingUpdate {
	tu.mutation.AddAgeFrom(i)
	return tu
}

// ClearAgeFrom clears the value of the "age_from" field.
func (tu *TargetingUpdate) ClearAgeFrom() *TargetingUpdate {
	tu.mutation.ClearAgeFrom()
	return tu
}

// SetAgeTo sets the "age_to" field.
func (tu *TargetingUpdate) SetAgeTo(i int) *TargetingUpdate {
	tu.mutation.ResetAgeTo()
	tu.mutation.SetAgeTo(i)
	return tu
}

// SetNillableAgeTo sets the "age_to" field if the given value is not nil.
func (tu *TargetingUpdate) SetNillableAgeTo(i *int) *TargetingUpdate {
	if i != nil {
		tu.SetAgeTo(*i)
	}
	return tu
}

// AddAgeTo adds i to the "age_to" field.
func (tu *TargetingUpdate) AddAgeTo(i int) *TargetingUpdate {
	tu.mutation.AddAgeTo(i)
	return tu
}

// ClearAgeTo clears the value of the "age_to" field.
func (tu *TargetingUpdate) ClearAgeTo() *TargetingUpdate {
	tu.mutation.ClearAgeTo()
	return tu
}

// SetLocation sets the "location" field.
func (tu *TargetingUpdate) SetLocation(s string) *TargetingUpdate {
	tu.mutation.SetLocation(s)
	return tu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (tu *TargetingUpdate) SetNillableLocation(s *string) *TargetingUpdate {
	if s != nil {
		tu.SetLocation(*s)
	}
	return tu
}

// ClearLocation clears the value of the "location" field.
func (tu *TargetingUpdate) ClearLocation() *TargetingUpdate {
	tu.mutation.ClearLocation()
	return tu
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (tu *TargetingUpdate) SetCampaignID(id uuid.UUID) *TargetingUpdate {
	tu.mutation.SetCampaignID(id)
	return tu
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (tu *TargetingUpdate) SetCampaign(c *Campaign) *TargetingUpdate {
	return tu.SetCampaignID(c.ID)
}

// Mutation returns the TargetingMutation object of the builder.
func (tu *TargetingUpdate) Mutation() *TargetingMutation {
	return tu.mutation
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (tu *TargetingUpdate) ClearCampaign() *TargetingUpdate {
	tu.mutation.ClearCampaign()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TargetingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TargetingUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TargetingUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TargetingUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TargetingUpdate) check() error {
	if v, ok := tu.mutation.Gender(); ok {
		if err := targeting.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Targeting.gender": %w`, err)}
		}
	}
	if tu.mutation.CampaignCleared() && len(tu.mutation.CampaignIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Targeting.campaign"`)
	}
	return nil
}

func (tu *TargetingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(targeting.Table, targeting.Columns, sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Gender(); ok {
		_spec.SetField(targeting.FieldGender, field.TypeEnum, value)
	}
	if tu.mutation.GenderCleared() {
		_spec.ClearField(targeting.FieldGender, field.TypeEnum)
	}
	if value, ok := tu.mutation.AgeFrom(); ok {
		_spec.SetField(targeting.FieldAgeFrom, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAgeFrom(); ok {
		_spec.AddField(targeting.FieldAgeFrom, field.TypeInt, value)
	}
	if tu.mutation.AgeFromCleared() {
		_spec.ClearField(targeting.FieldAgeFrom, field.TypeInt)
	}
	if value, ok := tu.mutation.AgeTo(); ok {
		_spec.SetField(targeting.FieldAgeTo, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAgeTo(); ok {
		_spec.AddField(targeting.FieldAgeTo, field.TypeInt, value)
	}
	if tu.mutation.AgeToCleared() {
		_spec.ClearField(targeting.FieldAgeTo, field.TypeInt)
	}
	if value, ok := tu.mutation.Location(); ok {
		_spec.SetField(targeting.FieldLocation, field.TypeString, value)
	}
	if tu.mutation.LocationCleared() {
		_spec.ClearField(targeting.FieldLocation, field.TypeString)
	}
	if tu.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   targeting.CampaignTable,
			Columns: []string{targeting.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   targeting.CampaignTable,
			Columns: []string{targeting.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{targeting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TargetingUpdateOne is the builder for updating a single Targeting entity.
type TargetingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TargetingMutation
}

// SetGender sets the "gender" field.
func (tuo *TargetingUpdateOne) SetGender(t targeting.Gender) *TargetingUpdateOne {
	tuo.mutation.SetGender(t)
	return tuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (tuo *TargetingUpdateOne) SetNillableGender(t *targeting.Gender) *TargetingUpdateOne {
	if t != nil {
		tuo.SetGender(*t)
	}
	return tuo
}

// ClearGender clears the value of the "gender" field.
func (tuo *TargetingUpdateOne) ClearGender() *TargetingUpdateOne {
	tuo.mutation.ClearGender()
	return tuo
}

// SetAgeFrom sets the "age_from" field.
func (tuo *TargetingUpdateOne) SetAgeFrom(i int) *TargetingUpdateOne {
	tuo.mutation.ResetAgeFrom()
	tuo.mutation.SetAgeFrom(i)
	return tuo
}

// SetNillableAgeFrom sets the "age_from" field if the given value is not nil.
func (tuo *TargetingUpdateOne) SetNillableAgeFrom(i *int) *TargetingUpdateOne {
	if i != nil {
		tuo.SetAgeFrom(*i)
	}
	return tuo
}

// AddAgeFrom adds i to the "age_from" field.
func (tuo *TargetingUpdateOne) AddAgeFrom(i int) *TargetingUpdateOne {
	tuo.mutation.AddAgeFrom(i)
	return tuo
}

// ClearAgeFrom clears the value of the "age_from" field.
func (tuo *TargetingUpdateOne) ClearAgeFrom() *TargetingUpdateOne {
	tuo.mutation.ClearAgeFrom()
	return tuo
}

// SetAgeTo sets the "age_to" field.
func (tuo *TargetingUpdateOne) SetAgeTo(i int) *TargetingUpdateOne {
	tuo.mutation.ResetAgeTo()
	tuo.mutation.SetAgeTo(i)
	return tuo
}

// SetNillableAgeTo sets the "age_to" field if the given value is not nil.
func (tuo *TargetingUpdateOne) SetNillableAgeTo(i *int) *TargetingUpdateOne {
	if i != nil {
		tuo.SetAgeTo(*i)
	}
	return tuo
}

// AddAgeTo adds i to the "age_to" field.
func (tuo *TargetingUpdateOne) AddAgeTo(i int) *TargetingUpdateOne {
	tuo.mutation.AddAgeTo(i)
	return tuo
}

// ClearAgeTo clears the value of the "age_to" field.
func (tuo *TargetingUpdateOne) ClearAgeTo() *TargetingUpdateOne {
	tuo.mutation.ClearAgeTo()
	return tuo
}

// SetLocation sets the "location" field.
func (tuo *TargetingUpdateOne) SetLocation(s string) *TargetingUpdateOne {
	tuo.mutation.SetLocation(s)
	return tuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (tuo *TargetingUpdateOne) SetNillableLocation(s *string) *TargetingUpdateOne {
	if s != nil {
		tuo.SetLocation(*s)
	}
	return tuo
}

// ClearLocation clears the value of the "location" field.
func (tuo *TargetingUpdateOne) ClearLocation() *TargetingUpdateOne {
	tuo.mutation.ClearLocation()
	return tuo
}

// SetCampaignID sets the "campaign" edge to the Campaign entity by ID.
func (tuo *TargetingUpdateOne) SetCampaignID(id uuid.UUID) *TargetingUpdateOne {
	tuo.mutation.SetCampaignID(id)
	return tuo
}

// SetCampaign sets the "campaign" edge to the Campaign entity.
func (tuo *TargetingUpdateOne) SetCampaign(c *Campaign) *TargetingUpdateOne {
	return tuo.SetCampaignID(c.ID)
}

// Mutation returns the TargetingMutation object of the builder.
func (tuo *TargetingUpdateOne) Mutation() *TargetingMutation {
	return tuo.mutation
}

// ClearCampaign clears the "campaign" edge to the Campaign entity.
func (tuo *TargetingUpdateOne) ClearCampaign() *TargetingUpdateOne {
	tuo.mutation.ClearCampaign()
	return tuo
}

// Where appends a list predicates to the TargetingUpdate builder.
func (tuo *TargetingUpdateOne) Where(ps ...predicate.Targeting) *TargetingUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TargetingUpdateOne) Select(field string, fields ...string) *TargetingUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Targeting entity.
func (tuo *TargetingUpdateOne) Save(ctx context.Context) (*Targeting, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TargetingUpdateOne) SaveX(ctx context.Context) *Targeting {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TargetingUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TargetingUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TargetingUpdateOne) check() error {
	if v, ok := tuo.mutation.Gender(); ok {
		if err := targeting.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Targeting.gender": %w`, err)}
		}
	}
	if tuo.mutation.CampaignCleared() && len(tuo.mutation.CampaignIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Targeting.campaign"`)
	}
	return nil
}

func (tuo *TargetingUpdateOne) sqlSave(ctx context.Context) (_node *Targeting, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(targeting.Table, targeting.Columns, sqlgraph.NewFieldSpec(targeting.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Targeting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, targeting.FieldID)
		for _, f := range fields {
			if !targeting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != targeting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Gender(); ok {
		_spec.SetField(targeting.FieldGender, field.TypeEnum, value)
	}
	if tuo.mutation.GenderCleared() {
		_spec.ClearField(targeting.FieldGender, field.TypeEnum)
	}
	if value, ok := tuo.mutation.AgeFrom(); ok {
		_spec.SetField(targeting.FieldAgeFrom, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAgeFrom(); ok {
		_spec.AddField(targeting.FieldAgeFrom, field.TypeInt, value)
	}
	if tuo.mutation.AgeFromCleared() {
		_spec.ClearField(targeting.FieldAgeFrom, field.TypeInt)
	}
	if value, ok := tuo.mutation.AgeTo(); ok {
		_spec.SetField(targeting.FieldAgeTo, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAgeTo(); ok {
		_spec.AddField(targeting.FieldAgeTo, field.TypeInt, value)
	}
	if tuo.mutation.AgeToCleared() {
		_spec.ClearField(targeting.FieldAgeTo, field.TypeInt)
	}
	if value, ok := tuo.mutation.Location(); ok {
		_spec.SetField(targeting.FieldLocation, field.TypeString, value)
	}
	if tuo.mutation.LocationCleared() {
		_spec.ClearField(targeting.FieldLocation, field.TypeString)
	}
	if tuo.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   targeting.CampaignTable,
			Columns: []string{targeting.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   targeting.CampaignTable,
			Columns: []string{targeting.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Targeting{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{targeting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
